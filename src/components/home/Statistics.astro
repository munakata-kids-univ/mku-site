---
// 統計カード アイコンのインポート
import iconNumbers01 from '../../assets/icons/numbers-mc/icon_numbers-main-campus-01.svg';
import iconNumbers02 from '../../assets/icons/numbers-mc/icon_numbers-main-campus-02.svg';
import iconNumbers03 from '../../assets/icons/numbers-mc/icon_numbers-main-campus-03.svg';
import iconNumbers04 from '../../assets/icons/numbers-mc/icon_numbers-main-campus-04.svg';
import iconNumbers05 from '../../assets/icons/numbers-mc/icon_numbers-main-campus-05.svg';
import iconNumbers06 from '../../assets/icons/numbers-mc/icon_numbers-main-campus-06.svg';
import iconNumbersTitle from '../../assets/icons/numbers-mc/icon_numbers-main-campus-title-01.svg';

// 統計データの配列
const statisticsData = [
  {
    id: '01',
    iconSrc: iconNumbers01.src,
    number: [
      { target: 5, unit: '人に' },
      { target: 1, unit: '人' }
    ],
    label: 'の市内小学生が応募',
    comment: '多くの子どもたちがチャレンジ'
  },
  {
    id: '02',
    iconSrc: iconNumbers02.src,
    number: [
      { target: 123, unit: '%' }
    ],
    label: 'の応募倍率',
    comment: '定員を上回る応募者'
  },
  {
    id: '03',
    iconSrc: iconNumbers03.src,
    number: [
      { target: 34, unit: '講座' }
    ],
    label: 'が令和6年度開講',
    comment: '多彩な業界・職種'
  },
  {
    id: '04',
    iconSrc: iconNumbers04.src,
    number: [
      { target: 99.6, unit: '%' }
    ],
    label: 'のコース満足度',
    comment: '「とても楽しかった」「楽しかった」と回答'
  },
  {
    id: '05',
    iconSrc: iconNumbers05.src,
    number: [
      { target: 93.3, unit: '%' }
    ],
    label: '職業・生き方への理解',
    comment: [
      'いろいろな職業や生き方があることが',
      '「よく分かった」「分かった」と回答'
    ]
  },
  {
    id: '06',
    iconSrc: iconNumbers06.src,
    number: [
      { target: 92.0, unit: '%' }
    ],
    label: '働くこと・人への理解',
    comment: [
      '働く大切さ・楽しさ・苦労が',
      '「よく分かった」「分かった」と回答'
    ]
  }
];
---

<section class="statistics">
  <div class="statistics__title-bg">
    <img src={iconNumbersTitle.src} alt="" class="statistics__title-bg-icon" />
  </div>
  <div class="u-container">
    <div class="statistics__header fade-up">
      <h2 class="statistics__title">数字で見る<span class="statistics__title-break">"メインキャンパス"</span></h2>
      <p class="statistics__subtitle">By the Numbers — Main Campus</p>
    </div>

    <div class="statistics__grid">
      {statisticsData.map((stat) => (
        <div class={`stat-card stat-card--${stat.id}`}>
          <div class="stat-card__icon">
            <img src={stat.iconSrc} alt="" class="stat-card__icon-image" />
          </div>
          <div class="stat-card__content">
            <div class="stat-card__number">
              {stat.number.map((num, index) => (
                <Fragment>
                  <span class="count-up" data-target={num.target.toString()}>
                    {num.target % 1 !== 0 ? '0.0' : '0'}
                  </span>
                  <span class="stat-card__unit">{num.unit}</span>
                </Fragment>
              ))}
            </div>
            <div class="stat-card__label">{stat.label}</div>
            <div class="stat-card__sub-comment">
              {Array.isArray(stat.comment) ? (
                stat.comment.map((line, index) => (
                  <span class={`stat-card__sub-comment-line${index + 1}`}>{line}</span>
                ))
              ) : (
                stat.comment
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<style lang="scss">
@import '../../styles/_index';

/* 数字で見るメインキャンパス セクション */
.statistics {
  @include container;
  background-color: $background-quaternary;
  padding-top: rem(80);
  padding-bottom: rem(80);
  position: relative;
  border-top-left-radius: rem(30);
  border-bottom-right-radius: rem(30);
  
  @include breakpoint-up(md) {
    padding-top: rem(100);
    padding-bottom: rem(100);
    border-top-left-radius: rem(60);
    border-bottom-right-radius: rem(60);
  }
  
  @include breakpoint-up(lg) {
    padding-top: rem(120);
    padding-bottom: rem(120);
    border-top-left-radius: rem(72);
    border-bottom-right-radius: rem(72);
  }

  // 切り欠け部分の背景色を設定
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: $background-primary;
    z-index: -1;

  }

  // 右下の切り欠け部分の背景色を設定
  &::before {
    content: '';
    position: absolute;
    bottom: 0;
    right: 0;
    width: rem(30);
    height: rem(30);
    background-color: $background-quaternary;
    z-index: -1;
    
    @include breakpoint-up(md) {
      width: rem(60);
      height: rem(60);
    }
    
    @include breakpoint-up(lg) {
      width: rem(72);
      height: rem(72);
    }
  }

  &__header {
    text-align: center;
    margin-bottom: rem(64);
    
    @include breakpoint-up(md) {
      margin-bottom: rem(80);
    }
  }

  &__title-bg {
    position: absolute;
    top: rem(-30);
    left: 50%;
    transform: translateX(-50%);
    z-index: 0;
    
    @include breakpoint-up(md) {
    }
    
    @include breakpoint-up(lg) {
      top: rem(-70);
    }
  }

  &__title-bg-icon {
    width: rem(120);
    height: auto;
    
    @include breakpoint-up(md) {
      // width: rem(200);
    }
    
    @include breakpoint-up(lg) {
      width: rem(160);
    }
  }

  &__title {
    position: relative;
    z-index: 2;
    @include font-ja-l(semibold);
    margin-bottom: 0;
    margin-top: rem(10);
    
    @include breakpoint-up(lg) {
      @include font-ja-2l(semibold);
    }
  }

  &__title-break {
    @include breakpoint-down(sm) {
      display: block;
    }
  }

  &__subtitle {
    position: relative;
    z-index: 2;
    @include font-ja-2s(semibold);
    color: $text-secondary;
    margin: 0;
    letter-spacing: 1px;
    
    @include breakpoint-up(lg) {
      @include font-ja-s(semibold);
    }
  }

  &__grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: rem(10);
    
    @include breakpoint-up(md) {
      grid-template-columns: repeat(3, 1fr);
      gap: rem(12);
    }
    
    @include breakpoint-up(xl) {
      gap: rem(32);
    }
  }
  
  // md以降でのカード順序変更
  @include breakpoint-up(md) {
    .stat-card--01 { order: 2; }
    .stat-card--02 { order: 1; }
    .stat-card--03 { order: 3; }
    .stat-card--04 { order: 4; }
    .stat-card--05 { order: 6; }
    .stat-card--06 { order: 5; }
  }
}

/* 統計カード */
.stat-card {
  background: $background-primary;
  @include radius-l;
  padding: rem(20) rem(10);
  text-align: center;
  
  @include breakpoint-up(lg) {
    padding: rem(20);// padding: rem(20) rem(10);
  }
  @include breakpoint-up(xl) {
    padding: rem(20) rem(40);
  }

  &__icon {
    width: 50%;
    height: auto;
    aspect-ratio: 1 / 1;
    margin: 0 auto rem(12);
    
    @include breakpoint-up(lg) {
      width: 40%;
    }
    
    svg {
      width: 100%;
      height: 100%;
    }
  }

  &__icon-image {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  &__content {
    display: flex;
    flex-direction: column;
    gap: rem(6);
    color: $text-primary;
    
    @include breakpoint-up(md) {
      gap: rem(10);
    }
  }

  &__number {
    font-size: rem(36);
    font-weight: 800;
    color: $text-secondary;
    line-height: 1;
    display: flex;
    align-items: baseline;
    justify-content: center;
    gap: rem(2);
    
    @include breakpoint-up(md) {
      font-size: rem(48);
    }
    
    @include breakpoint-up(lg) {
      font-size: rem(56);
    }
    @include breakpoint-up(xl) {
      font-size: rem(72);
    }
  }

  &__unit {
    font-size: rem(20);
    font-weight: 600;
    color: $text-primary;
    
    @include breakpoint-up(md) {
      font-size: rem(24);
    }
    
    @include breakpoint-up(lg) {
      font-size: rem(28);
    }
  }

  &__label {
    @include font-ja-s(semibold);
    color: $text-primary;
    
    @include breakpoint-up(lg) {
      @include font-ja-m(semibold);
    }
  }
  
  &__sub-comment {
    width: 100%;
    text-align: center;
    padding: rem(15) rem(5);
    color: $text-primary;
    @include radius-xs;
    @include font-ja-3s(semibold);
    line-height: 1.3;
    margin-top: rem(12);
    
    @include breakpoint-up(md) {
      @include font-ja-2s(semibold);
    }
    
    @include breakpoint-up(lg) {
      padding: rem(20) rem(15);
    }
  }
  
  &__sub-comment-line2 {
    @include breakpoint-up(xl) {
      display: block;
    }
  }
  
  // 個別カードのスタイル
  &--01, &--04, &--05 {
    background: $brand-secondary;
    
    .stat-card__unit,
    .stat-card__label {
      color: $text-white;
    }
    
    .stat-card__sub-comment {
      background: $background-quaternary;
    }
  }
  
  &--02, &--03, &--06 {
    background: $background-primary;
    
    .stat-card__sub-comment {
      background: $background-tertiary;
    }
  }

  &__sub-comment-line1,
  &__sub-comment-line2 {
    display: block;
  }
}
</style>

<script>
// カウントアップアニメーション関数
function animateCountUp(element: HTMLElement, start: number, end: number, duration: number, isDecimal: boolean = false) {
  const startTime = Date.now();
  
  function update() {
    const elapsed = Date.now() - startTime;
    const progress = Math.min(elapsed / duration, 1);
    
    // イージング関数（easeOutQuart）
    const easeProgress = 1 - Math.pow(1 - progress, 4);
    
    const current = start + (end - start) * easeProgress;
    
    if (isDecimal) {
      element.textContent = current.toFixed(1);
    } else {
      element.textContent = Math.floor(current).toString();
    }
    
    if (progress < 1) {
      requestAnimationFrame(update);
    }
  }
  
  requestAnimationFrame(update);
}

// DOMContentLoaded後に実行
document.addEventListener('DOMContentLoaded', function() {
  // Intersection Observerでスクロール検知
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const statisticsSection = entry.target;
        const countUpElements = statisticsSection.querySelectorAll('.count-up');
        
        countUpElements.forEach(element => {
          const targetAttr = element.getAttribute('data-target');
          if (targetAttr) {
            const target = parseFloat(targetAttr);
            const isDecimal = target % 1 !== 0; // 小数点があるかチェック
            
            // アニメーション開始（1から開始、3秒間）
            animateCountUp(element as HTMLElement, 1, target, 3000, isDecimal);
          }
        });
        
        // 一度実行したら監視を停止
        observer.unobserve(statisticsSection);
      }
    });
  }, {
    threshold: 0.3, // セクションの30%が見えたら実行
    rootMargin: '0px 0px -100px 0px' // 下から100px余裕を持たせる
  });
  
  // statisticsセクションを監視対象に追加
  const statisticsSection = document.querySelector('.statistics');
  if (statisticsSection) {
    observer.observe(statisticsSection);
  }
});
</script>