---
// jobアイコンのインポート（個別で必要）
import iconPlane from '../../assets/icons/jobs/icon_job-plane-01.svg';
import iconPolice from '../../assets/icons/jobs/icon_job-police-01.svg';
import iconTrain from '../../assets/icons/jobs/icon_job-train-01.svg';
import iconStethoscope from '../../assets/icons/jobs/icon_job-stethoscope-01.svg';
import iconChefHat from '../../assets/icons/jobs/icon_job-chef-hat-01.svg';
import iconWrench from '../../assets/icons/jobs/icon_job-wrench-01.svg';
import iconFish from '../../assets/icons/jobs/icon_job-fish-01.svg';
import iconMicrophone from '../../assets/icons/jobs/icon_job-microphone-01.svg';
import iconInjection from '../../assets/icons/jobs/icon_job-injection-01.svg';
import iconHelmet from '../../assets/icons/jobs/icon_job-helmet-01.svg';
import iconPencil from '../../assets/icons/jobs/icon_job-pencil-01.svg';
import iconRocket from '../../assets/icons/jobs/icon_job-rocket-01.svg';
import iconGame from '../../assets/icons/jobs/icon_job-game-01.svg';
import iconPrograming from '../../assets/icons/jobs/icon_job-programing-01.svg';
import iconBaseball from '../../assets/icons/jobs/icon_job-baseball-01.svg';

// jobアイコンのデータ配列（元の順序を保持）
const jobIcons = [
  { icon: iconPlane, label: 'パイロット' },
  { icon: iconPolice, label: '警察官' },
  { icon: iconTrain, label: '電車運転士' },
  { icon: iconStethoscope, label: '医師' },
  { icon: iconChefHat, label: 'シェフ' },
  { icon: iconWrench, label: '整備士' },
  { icon: iconFish, label: '漁師' },
  { icon: iconMicrophone, label: 'アナウンサー' },
  { icon: iconInjection, label: '看護師' },
  { icon: iconHelmet, label: '建設作業員' },
  { icon: iconPencil, label: 'デザイナー' },
  { icon: iconRocket, label: '宇宙飛行士' },
  { icon: iconGame, label: 'ゲームクリエイター' },
  { icon: iconPrograming, label: 'プログラマー' },
  { icon: iconBaseball, label: '野球選手' }
];
---

<section class="jobs-slider-section">
  <!-- CSS Animationで実装 -->
  
  <div class="jobs-slider">
    <div class="jobs-slider__slides" data-duration="20" data-duration-sm="40">
      <!-- 第1セット -->
      <div class="jobs-slider__slide">
        {jobIcons.map((job) => (
          <div class="jobs-icon">
            <img 
              src={job.icon.src} 
              alt={job.label} 
              class="jobs-icon__image" 
            />
          </div>
        ))}
      </div>
      <!-- 第2セット（シームレスループ用） -->
      <div class="jobs-slider__slide">
        {jobIcons.map((job) => (
          <div class="jobs-icon">
            <img 
              src={job.icon.src} 
              alt={job.label} 
              class="jobs-icon__image" 
            />
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<style lang="scss">
  @import "../../styles/index";

  .jobs-slider-section {
    background-color: $background-tertiary;
    
    @include breakpoint-up(xl) {
      padding-top: rem(20);
    }
  }

  .jobs-slider {
    width: 100vw;
    margin-left: calc(-50vw + 50%);
    overflow: hidden;
    position: relative;
    padding: rem(40) 0;
  }

  .jobs-slider__slides {
    display: flex;
    width: 200%; // 2セット分の幅
  }
  
  .jobs-slider__slide {
    flex-basis: 50%; // 各セットが50%の幅
    display: flex;
    align-items: center;
    gap: rem(20); // アイコン間の間隔を統一
    padding: 0 rem(10); // 左右端の余白
    
    @include breakpoint-up(sm) {
      gap: rem(30);
      padding: 0 rem(15);
    }
    
    @include breakpoint-up(lg) {
      gap: rem(40);
      padding: 0 rem(20);
    }
  }

  .jobs-icon {
    width: rem(50);
    height: rem(50);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0; // flexアイテムが縮まないように
    
    @include breakpoint-up(lg) {
      width: rem(60);
      height: rem(60);
    }
    
    @include breakpoint-up(xl) {
      width: rem(80);
      height: rem(80);
    }
    
    // 個別のプカプカアニメーション（遅延を使って自然な動きに）
    &:nth-child(odd) {
      animation: floatUp 3s ease-in-out infinite;
    }
    
    &:nth-child(even) {
      animation: floatUp 3s ease-in-out infinite 1.5s;
    }
    
    &:nth-child(3n) {
      animation: floatUp 3.5s ease-in-out infinite 0.8s;
    }
    
    &:nth-child(4n) {
      animation: floatUp 2.8s ease-in-out infinite 2.2s;
    }
    
    &:nth-child(5n) {
      animation: floatUp 3.2s ease-in-out infinite 1.8s;
    }
    
    &__image {
      width: 100%;
      height: 100%;
      object-fit: contain;
      transition: transform 0.3s ease;
    }
    
    &:hover &__image {
      transform: scale(1.1) rotate(30deg);
    }
  }

  // 上下プカプカアニメーション
  @keyframes floatUp {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(rem(-12));
    }
  }
</style>

<script>
window.addEventListener('DOMContentLoaded', (event) => {
  const slides = document.getElementsByClassName('jobs-slider__slides');
  
  for (let i = 0; i < slides.length; ++i) {
    const target = slides[i];
    // sm以降はより遅い速度を使用
    const isSmUp = window.innerWidth >= 640;
    const durationAttr = isSmUp ? target.dataset.durationSm : target.dataset.duration;
    const duration = parseInt(durationAttr || target.dataset.duration) * 1000 || 20000;
    const childNum = target.firstElementChild.children.length; // 1つ目のスライド内のアイコン数
    const iconWidth = ((100 / childNum)).toFixed(2);
    
    // CSS変数としてアイコン幅を設定
    target.style.setProperty('--icon-width', `${iconWidth}%`);

    let startTime = 0;
    let elapsed = 0;
    let progress = 0;

    const loop = (currentTime) => {
      if (!startTime) startTime = currentTime;
      
      elapsed = currentTime - startTime;
      progress = elapsed / duration;
      
      if (progress >= 1) {
        // 1周完了、リセット
        progress = 0;
        startTime = currentTime;
      }
      
      // シームレスな移動（50%移動すれば元の位置に戻る）
      const translateX = -(progress * 50);
      target.style.transform = `translateX(${translateX}%)`;
      
      requestAnimationFrame(loop);
    };
    
    requestAnimationFrame(loop);
  }
});
</script>