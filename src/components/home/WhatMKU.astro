---
import BaseButton from '../BaseButton.astro';

// スライダー画像のデータ
const sliderImages = [
  {
    src: "/images/content/img_top_what-mku-01.webp",
    alt: "子どもたちの学習風景1"
  },
  {
    src: "/images/content/img_top_what-mku-02.webp", 
    alt: "子どもたちの学習風景2"
  },
  {
    src: "/images/content/img_top_what-mku-03.webp",
    alt: "子どもたちの学習風景3"
  },
  {
    src: "/images/content/img_top_what-mku-04.webp",
    alt: "子どもたちの学習風景4"
  },
  {
    src: "/images/content/img_top_what-mku-05.webp",
    alt: "子どもたちの学習風景5"
  }
];

// コンテンツデータ
const content = {
  title: "むなかた子ども大学とは",
  subtitle: "What is Munakata Kids University?",
  paragraphs: [
    "むなかた子ども大学は、子どもたちが自身の可能性を広げたり新たな可能性を発見し、興味・関心を深掘りして「志」を育むための取組です。教育関係者・企業・団体・市民・行政が総がかりで連携し、「本物から学ぶ」「本物を体験する」職業体験・社会体験の機会を子どもたちに提供し、キャリアプランニング能力の育成に努めています。",
    "\"好きなことを見つけ\" \"適正を知り\" \"社会や職業を正しく理解し\" \"将来のイメージを具体化\" できるような「本物」に触れる機会をとおして、子どもたちの発達段階に応じた主体的なキャリア形成の実現を目指しています。",
    "社会全体が一丸となって協力する、宗像ならではの学びの場が、子どもたちの夢への一歩につながることを願っています。"
  ],
  actionButton: {
    href: "/about",
    text: "詳しくみる"
  },
  kidsImage: {
    src: "/images/content/img_muk-kids-01.webp",
    alt: "むなかた子ども大学の子どもたち"
  }
};
---

<section class="what-mku">
  <div class="what-mku__container">
    <!-- テキストコンテンツ -->
    <div class="what-mku__content">
      <div class="what-mku__text-wrapper fade-up">
        <div class="what-mku__header">
          <h2 class="what-mku__title">{content.title}</h2>
          <p class="what-mku__subtitle">{content.subtitle}</p>
        </div>
        
        <div class="what-mku__description">
          {content.paragraphs.map((paragraph) => (
            <p class="what-mku__paragraph">{paragraph}</p>
          ))}
        </div>
        
        <!-- ボタン -->
        <div class="what-mku__action">
          <BaseButton href={content.actionButton.href} variant="white">
            詳しくみる
          </BaseButton>
        </div>
        
        <!-- イラスト -->
        <div class="what-mku__kids-image">
          <img src={content.kidsImage.src} alt={content.kidsImage.alt} class="what-mku__kids-img" />
        </div>
      </div>
    </div>

    <!-- 縦スライダー画像 -->
    <div class="what-mku__image-slider">
      <div class="what-mku__slider-track">
        <!-- 1セット目（元画像） -->
        {sliderImages.map((image) => (
          <img src={image.src} alt={image.alt} class="what-mku__slide-image" />
        ))}
        <!-- 2セット目（無限ループ用の複製） -->
        {sliderImages.map((image) => (
          <img src={image.src} alt={image.alt} class="what-mku__slide-image" />
        ))}
      </div>
    </div>
  </div>
</section>

<style lang="scss">
@import '../../styles/_index';

/* むなかた子ども大学とは セクション */
.what-mku {
  background-color: $brand-primary;
  color: $text-white;
  overflow: visible;
  border-top-left-radius: rem(30);
  border-bottom-right-radius: rem(30);
  position: relative;
  
  @include breakpoint-up(md) {
    border-top-left-radius: rem(60);
    border-bottom-right-radius: rem(60);
  }
  
  @include breakpoint-up(lg) {
    border-top-left-radius: rem(72);
    border-bottom-right-radius: rem(72);
  }
  
  // 左上の切り欠け部分の背景色を設定（上下半分で色分け）
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(to bottom, $background-tertiary 50%, $background-primary 50%);
    z-index: -1;
  }

  &__container {
    @include container;
    display: grid;
    grid-template-columns: 1fr;
    gap: rem(48);
    align-items: center;
    padding-bottom: rem(80);
    
    @include breakpoint-up(md) {
      padding-bottom: rem(100);
      align-items: flex-start;
    }
    
    @include breakpoint-up(lg) {
      grid-template-columns: 52% 1fr;
      gap: rem(35);
      padding-bottom: 0;
      align-items: start;
    }
    
    @include breakpoint-up(xl) {
      gap: rem(50);
    }
  }

  &__image-slider {
    width: 88%;
    margin: 0 auto;
    height: rem(425);
    overflow: hidden;
    position: relative;
    order: 1;
    
    @include breakpoint-up(md) {
      height: rem(500);
    }
    
    @include breakpoint-up(lg) {
      height: rem(1000);
      order: 2;
    }
    
    @include breakpoint-up(xl) {
      height: rem(960);
    }
  }

  &__slider-track {
    display: flex;
    flex-direction: column;
    row-gap: rem(16);
    height: fit-content; // 自然な高さ
    will-change: transform;
    
    @include breakpoint-up(sm) {
      row-gap: rem(24);
    }
    
    @include breakpoint-up(lg) {
      row-gap: rem(40);
    }
  }

  &__slide-image {
    width: 100%;
    aspect-ratio: 100 / 72;
    object-fit: cover;
    display: block;
    @include radius-2l;
  }

  &__content {
    text-align: center;
    order: 2;
    
    @include breakpoint-up(lg) {
      text-align: left;
      order: 1;
    }
  }

  &__text-wrapper {
    margin: 0 auto;
    
    @include breakpoint-up(lg) {
      margin: 0;
      padding-top: rem(90);
      padding-bottom: rem(30);
    }
  }

  &__header {
    margin-bottom: rem(32);
    text-align: left;
  }

  &__title {
    @include font-ja-l(semibold);
    color: $text-white;
    margin-bottom: 0;
    margin-top: rem(10);
    
    @include breakpoint-up(lg) {
      @include font-ja-2l(semibold);
    }
  }

  &__subtitle {
    @include font-ja-2s(semibold);
    color: $brand-purple;
    margin: 0;
    letter-spacing: 1px;
    
    @include breakpoint-up(lg) {
      @include font-ja-s(semibold);
    }
  }

  &__description {
    @include font-ja-s;
    line-height: 1.7;
    text-align: left;
  }

  &__paragraph {
    color: $text-white;
    margin-bottom: rem(24);
    opacity: 0.95;
    text-align: left;
    
    @include breakpoint-up(md) {
      margin-bottom: rem(32);
    }
    
    &:last-child {
      margin-bottom: 0;
    }
  }

  &__action {
    margin-top: rem(40);
    display: flex;
    flex-direction: column;
    gap: rem(16);
    align-items: center;
    
    @include breakpoint-up(lg) {
      align-items: flex-start;
    }
  }

  &__kids-image {
    margin-top: rem(24);
    text-align: left;
  }

  &__kids-img {
    display: block;
    width: 60%;
    margin: rem(40) auto 0;
    height: auto;
    
    @include breakpoint-up(sm) {
      width: 50%;
    }
    
    @include breakpoint-up(lg) {
      margin-right: 0;
    }
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const track = document.querySelector('.what-mku__slider-track') as HTMLElement;
  if (!track) return;
  
  let translateY = 0;
  const speed = 0.5; // px/frame
  let oneSetHeight = 0;
  let isCalculated = false;
  
  // 正確な1セット分の高さを一度だけ計算
  function calculateOneSetHeight() {
    if (isCalculated) return oneSetHeight;
    
    const images = track.querySelectorAll('.what-mku__slide-image') as NodeListOf<HTMLImageElement>;
    const totalImages = images.length;
    const oneSetCount = totalImages / 2; // 2セット構成
    
    // 実際のDOM要素の高さとgapを正確に測定
    let totalHeight = 0;
    
    for (let i = 0; i < oneSetCount; i++) {
      const image = images[i];
      if (image) {
        const rect = image.getBoundingClientRect();
        totalHeight += rect.height;
        
        // 最後の要素以外はgapを追加
        if (i < oneSetCount - 1) {
          const computedStyle = window.getComputedStyle(track);
          const gap = parseFloat(computedStyle.rowGap) || 0;
          totalHeight += gap;
        }
      }
    }
    
    oneSetHeight = totalHeight;
    isCalculated = true;
    return oneSetHeight;
  }
  
  function animate() {
    // 初回のみ高さを計算
    if (!isCalculated) {
      calculateOneSetHeight();
    }
    
    // 上方向に移動（negative方向）
    translateY -= speed;
    
    // ピクセル精度でのリセット判定
    // 1セット分を完全に移動したら即座に0に戻す
    if (Math.abs(translateY) >= oneSetHeight) {
      // 余剰分を考慮してピクセル精度でリセット
      const excess = Math.abs(translateY) - oneSetHeight;
      translateY = -excess; // 余剰分だけマイナス位置から開始
    }
    
    // transform適用（小数点も含めて適用）
    track.style.transform = `translateY(${translateY}px)`;
    
    requestAnimationFrame(animate);
  }
  
  // 画像の読み込み完了を待ってから開始
  const images = track.querySelectorAll('.what-mku__slide-image') as NodeListOf<HTMLImageElement>;
  let loadedImages = 0;
  
  function checkAllImagesLoaded() {
    loadedImages++;
    if (loadedImages >= images.length / 2) { // 1セット分の画像が読み込まれたら
      // 少し遅延してから開始（レンダリング完了を確実にする）
      setTimeout(() => {
        animate();
      }, 100);
    }
  }
  
  // 各画像の読み込みを監視
  images.forEach((img, index) => {
    if (index < images.length / 2) { // 1セット目のみ監視
      if (img.complete) {
        checkAllImagesLoaded();
      } else {
        img.addEventListener('load', checkAllImagesLoaded);
        img.addEventListener('error', checkAllImagesLoaded); // エラーでも進行
      }
    }
  });
});
</script>

