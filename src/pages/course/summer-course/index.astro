---
import BaseLayout from '@/layouts/BaseLayout.astro';
import HeroSection from '@/components/HeroSection.astro';
import Breadcrumb from '@/components/Breadcrumb.astro';
import ContentSectionHeader from '@/components/ContentSectionHeader.astro';
import CourseCard from '@/components/CourseCard.astro';
import { 
  getGlobalSettings, 
  getSummerCourses,
  getSummerCategories
} from '../../../lib/microcms';
import { convertYearToPath } from '../../../utils/yearConverter';
import { formatDateForCourse, convertUTCToJST, extractJSTDateParts } from '../../../utils/dateUtils';

// データ取得
const globalSettings = await getGlobalSettings();
const currentYear = globalSettings.currentYear;

// 現行年度の講座一覧を取得
const currentYearValue = Array.isArray(currentYear) ? currentYear[0] : currentYear;
if (!currentYearValue) {
  throw new Error('Current year is not defined');
}
const courses = await getSummerCourses(currentYearValue.toString());

// 過去の実績セクション用：全年度の講座データを取得
const allCourses = await getSummerCourses();

// 夏課外カテゴリーデータを取得
const summerCategories = await getSummerCategories();

// ページ情報
const pageTitle = `夏の課外授業（${currentYearValue}）`;
const pageDescription = `${currentYearValue}の夏の課外授業一覧。市内外問わず、幅広い年齢の子どもたちが参加できる体験活動で、夏休み期間中に多数開催しています。`;

// パンくずリスト
const breadcrumbItems = [
  { label: 'ホーム', href: '/' },
  { label: '講座内容', href: '/course' },
  { label: '夏の課外授業' }
];

// 申込ボタン（夏の課外授業設定から取得、後で実装）
const buttons = [];

// currentYearと一致する講座のみをフィルタリング
const filteredCourses = courses.filter(course => {
  const courseYearValue = Array.isArray(course.year) ? course.year[0] : course.year;
  return courseYearValue === currentYearValue;
});

// 講座カード用のデータ変換（開催日ごとに分割）
const currentYearPath = convertYearToPath(currentYearValue.toString());
let courseIndex = 0;
const courseCards = filteredCourses.flatMap(course => {
  courseIndex++;
  // scheduleが存在し、複数の開催日がある場合は分割
  if (course.schedule && course.schedule.length > 0) {
    return course.schedule.map((scheduleItem, index) => {
      const scheduleIndex = index + 1;
      const urlSuffix = course.schedule.length > 1 ? `-${scheduleIndex}` : '';
      
      // cityOutsideOkに基づく文言設定
      const residencyText = course.cityOutsideOk ? '市内・市外在住の' : '市内在住の';
      
      // parentJoin値の表示用変換
      // microCMSのselectフィールドはID値で返されるため、表示用テキストにマッピング
      const parentJoinMapping: Record<string, string> = {
        'r0A1BukTIs': '保護者の方も参加できます',
        '87MGdHzdV4': '保護者の方は参加できません',
        'FEytb3Ezyt': '保護者の方の参加が必須です'
      };
      
      const parentJoinValue = course.parentJoin;
      let parentJoinText = '';
      
      // 安全に文字列として処理
      const parentJoinStr = typeof parentJoinValue === 'string' ? parentJoinValue : (Array.isArray(parentJoinValue) ? parentJoinValue[0] : '');
      
      if (parentJoinStr && parentJoinStr !== '選択してください' && parentJoinStr.trim() !== '') {
        // IDの場合は表示テキストにマッピング、すでに表示テキストの場合はそのまま使用
        const displayText = parentJoinMapping[parentJoinStr] || parentJoinStr;
        parentJoinText = `※${displayText}`;
      }
      
      return {
        id: course.id,
        scheduleIndex,
        title: course.title,
        subtitle: course.subtitle,
        thumbImg: course.thumbImg,
        status: scheduleItem.subStatus || course.status,
        year: course.year,
        scheduleDate: course.atAnyTime ? null : scheduleItem.date, // 随時開催の場合は日付を空にする
        startTime: scheduleItem.startTime,
        endTime: scheduleItem.endTime,
        href: `/course/summer-course/${currentYearPath}/${course.id}${urlSuffix}`,
        providerNames: course.providerItem?.map(item => item.providerName).join('、') || '',
        targetGrades: Array.isArray(course.targetGrades) ? course.targetGrades : (course.targetGrades ? [course.targetGrades] : []),
        category: (typeof course.category === 'object' && course.category?.category) ? course.category.category : (course.category || 'その他'),
        courseType: (Array.isArray(course.courseType) ? course.courseType[0] : course.courseType)?.toString().trim() || 'undefined',
        residencyText,
        parentJoinText,
        atAnyTime: course.atAnyTime || false,
        hasReport: !!(course.afterImages?.length || course.instructor || course.afterReport || course.participantCount)
      };
    });
  } else {
    // scheduleが存在しない場合は従来通り
    const residencyText = course.cityOutsideOk ? '市内・市外在住の' : '市内在住の';
    // 随時開催の場合のparentJoin値の表示用変換
    // microCMSのselectフィールドはID値で返されるため、表示用テキストにマッピング
    const parentJoinMapping: Record<string, string> = {
      'r0A1BukTIs': '保護者の方も参加できます',
      '87MGdHzdV4': '保護者の方は参加できません',
      'FEytb3Ezyt': '保護者の方の参加が必須です'
    };
    
    const parentJoinValue = course.parentJoin;
    let parentJoinText = '';
    
    // 安全に文字列として処理
    const parentJoinStr = typeof parentJoinValue === 'string' ? parentJoinValue : (Array.isArray(parentJoinValue) ? parentJoinValue[0] : '');
    
    if (parentJoinStr && parentJoinStr !== '選択してください' && parentJoinStr.trim() !== '') {
      // IDの場合は表示テキストにマッピング、すでに表示テキストの場合はそのまま使用
      const displayText = parentJoinMapping[parentJoinStr] || parentJoinStr;
      parentJoinText = `※${displayText}`;
    }
    
    return [{
      id: course.id,
      scheduleIndex: 1,
      title: course.title,
      subtitle: course.subtitle,
      thumbImg: course.thumbImg,
      status: course.status,
      year: course.year,
      scheduleDate: null,
      startTime: null,
      endTime: null,
      href: `/course/summer-course/${currentYearPath}/${course.id}`,
      providerNames: course.providerItem?.map(item => item.providerName).join('、') || '',
      targetGrades: Array.isArray(course.targetGrades) ? course.targetGrades : (course.targetGrades ? [course.targetGrades] : []),
      category: (typeof course.category === 'object' && course.category?.category) ? course.category.category : (course.category || 'その他'),
      courseType: (Array.isArray(course.courseType) ? course.courseType[0] : course.courseType)?.toString().trim() || 'undefined',
      residencyText,
      parentJoinText,
      atAnyTime: course.atAnyTime || false,
      hasReport: !!(course.afterImages?.length || course.instructor || course.afterReport || course.afterMovieUrl)
    }];
  }
});


// フェーズに応じたメッセージ（後で実装）
const getPhaseMessage = (phase: string) => {
  switch (phase) {
    case 'before':
      return '講座の申し込み受付を開始しました。下記のボタンからお申し込みください。';
    case 'during':
      return '講座を開催中です。参加者の皆様は実施要項をご確認ください。';
    case 'after':
      return '今年度の講座は終了しました。来年度の開催をお楽しみに。';
    default:
      return '';
  }
};

// TODO: 夏の課外授業のフェーズ取得（後で実装）
const phase = 'before';
const phaseMessage = '';


// ステータス別の背景色クラス取得関数
function getStatusColorClass(status: string): string {
  switch (status) {
    case '募集前':
    case '募集締切':
      return 'status-badge--dark-gray';
    case '募集受付中':
      return 'status-badge--brand-secondary';
    case '抽選作業中':
      return 'status-badge--brand-pink';
    case '当選者発表':
      return 'status-badge--brand-pink';
    default:
      return 'status-badge--dark-gray';
  }
}

// フェーズをステータス表示文字列に変換する関数
function convertPhaseToStatus(phase: string): string {
  switch (phase) {
    case '募集前':
      return '募集前';
    case '募集締切':
      return '募集締切';
    case '1次募集受付中':
      return '1次募集受付中';
    case '2次募集受付中':
      return '2次募集受付中';
    case '1次抽選作業中':
      return '1次抽選作業中';
    case '1次当選者発表':
      return '1次当選者発表';
    case '開催中':
      return '開催中';
    case '終了':
      return '終了';
    default:
      return '準備中';
  }
}

// 講座のステータスを取得する関数（個別ステータス優先、フォールバックでフェーズ設定）
function getCourseStatus(course: any, globalPhase: string, currentYearValue: string): string {
  // 講座の年度を取得
  const courseYearValue = Array.isArray(course.year) ? course.year[0] : course.year;
  
  // 現在年度以外の講座（過去の実績）は強制的に「募集終了」
  if (courseYearValue !== currentYearValue) {
    return '募集終了';
  }
  
  // 現在年度の講座の場合、既存のロジックを適用
  // 個別の講座ステータスが設定されており、「フェーズ設定に従う」以外の場合はそれを使用
  if (course.status && Array.isArray(course.status) && course.status.length > 0 && 
      course.status[0] !== 'default' && course.status[0] !== 'フェーズ設定に従う') {
    return course.status[0];
  }
  
  // 個別ステータスが未設定、default、または「フェーズ設定に従う」の場合、グローバルフェーズを変換して使用
  const phaseValue = Array.isArray(globalPhase) ? globalPhase[0] : globalPhase;
  return convertPhaseToStatus(phaseValue || '準備中');
}

// 学年の色分けクラス取得関数（scheduleページと同様）
function getGradeColorClass(grade: string): string {
  // むなかた子ども大学の日（学校名）の場合
  if (grade.includes('小学校') || grade.includes('中学校') || grade.includes('学校') || grade.includes('学園')) {
    return 'mku-day';
  }
  
  // 特殊なケース
  if (grade === '未就学児' || grade === 'だれでも' || grade.includes('その他')) {
    return 'special';
  }
  
  // 数字を抽出
  const yearMatch = grade.match(/^(\d+)年$/);
  if (yearMatch) {
    const num = parseInt(yearMatch[1]);
    if (num >= 1 && num <= 3) return 'elementary-low';    // 1~3年
    if (num >= 4 && num <= 6) return 'elementary-high';   // 4~6年
    if (num >= 7 && num <= 9) return 'junior';            // 7~9年
  }
  
  // 高校生
  if (grade.match(/^高\d+$/)) {
    return 'junior'; // 高校生は中学生と同じ色
  }
  
  // その他
  return 'special';
}

// UTC実施日をJSTに変換してフォーマットする関数
function formatExecutedDate(utcDateString: string): string {
  if (!utcDateString) return '';
  return formatDateForCourse(utcDateString);
}

// 学年の整列順序関数（scheduleページと同様）
function formatTargetGrades(targetGrades: string | string[]): { sortedGrades: string[]; htmlString: string } {
  const grades = Array.isArray(targetGrades) ? targetGrades : [targetGrades];
  
  // 学年の表示順を決める関数
  function getGradeOrder(grade: string): number {
    // 未就学児は最初
    if (grade === '未就学児') {
      return 0;
    }
    
    // 1年～9年（小中学校）
    const elementaryJuniorMatch = grade.match(/^(\d+)年$/);
    if (elementaryJuniorMatch && elementaryJuniorMatch[1]) {
      const num = parseInt(elementaryJuniorMatch[1]);
      if (num >= 1 && num <= 9) {
        return num; // 1～9の順序
      }
    }
    
    // 高1～高3（高校）
    const highSchoolMatch = grade.match(/^高(\d+)$/);
    if (highSchoolMatch && highSchoolMatch[1]) {
      const num = parseInt(highSchoolMatch[1]);
      if (num >= 1 && num <= 3) {
        return 10 + num; // 11～13の順序（10 + 1～3）
      }
    }
    
    // その他は最後
    return 999;
  }
  
  // 学年を指定された順序でソート
  const sortedGrades = grades.sort((a, b) => {
    return getGradeOrder(a) - getGradeOrder(b);
  });
  
  return {
    sortedGrades,
    htmlString: sortedGrades.join('・') // 後方互換性のため
  };
}
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <main>
    <!-- ヒーローセクション -->
    <HeroSection 
      title="夏の課外授業"
      subtitle="Summer Course"
      imageSrc="/images/backgrounds/img_bg-hero_summer-course-01.webp"
      imageAlt="夏の課外授業"
      customBackgroundStyle="hero--summer-course"
    />

    <!-- パンくずリスト -->
    <Breadcrumb items={breadcrumbItems} />
  
    <!-- ①導入セクション -->
    <section class="intro-section">
      <div class="content-section__container intro-section__container">
        <div class="intro-section__content">
          <h1 class="intro-section__title">
            <span class="intro-section__title-line">宗像市の魅力を楽しく学ぶ、<br class="u-br-sm">本物の体験学習</span>
          </h1>
          <p class="intro-section__description">
            市内外問わず、幅広い年齢の子どもたちが参加できる体験活動。<br>
            ものづくり、スポーツ・遊び、飲食・食育など様々なカテゴリーの体験を、夏休み期間中に多数開催しています。
          </p>
          
          <!-- 夏の課外授業 3つのポイント -->
          <div class="intro-section__points">
            <h2 class="intro-section__points-title">
              夏の課外授業 <span class="intro-section__points-number">3</span>つのポイント
            </h2>
            
            <div class="intro-section__points-grid">
              <!-- ポイント01 -->
              <div class="intro-section__point">
                <div class="intro-section__point-image">
                  <img src="/images/content/img_summer-course-point-01.webp" alt="ポイント1" />
                </div>
                <div class="intro-section__point-content">
                  <div class="intro-section__point-number">
                    <span class="point-text">point</span><span class="point-number">01</span>
                  </div>
                  <h3 class="intro-section__point-title">多彩なカテゴリー</h3>
                  <p class="intro-section__point-description">
                    ものづくり、スポーツ・遊び、飲食・食育などの多彩なカテゴリーの体験活動を用意。
                  </p>
                </div>
              </div>
              
              <!-- ポイント02 -->
              <div class="intro-section__point">
                <div class="intro-section__point-image">
                  <img src="/images/content/img_summer-course-point-02.webp" alt="ポイント2" />
                </div>
                <div class="intro-section__point-content">
                  <div class="intro-section__point-number">
                    <span class="point-text">point</span><span class="point-number">02</span>
                  </div>
                  <h3 class="intro-section__point-title">市内外の小中学生が参加可能</h3>
                  <p class="intro-section__point-description">
                    居住地域を問わず、全国から小学生・中学生が気軽に参加可能。
                  </p>
                </div>
              </div>
              
              <!-- ポイント03 -->
              <div class="intro-section__point">
                <div class="intro-section__point-image">
                  <img src="/images/content/img_summer-course-point-03.webp" alt="ポイント3" />
                </div>
                <div class="intro-section__point-content">
                  <div class="intro-section__point-number">
                    <span class="point-text">point</span><span class="point-number">03</span>
                  </div>
                  <h3 class="intro-section__point-title">事業者・団体が主体運営</h3>
                  <p class="intro-section__point-description">
                    各分野の企業や団体が主催・講師となり、本物の体験を提供。
                  </p>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Navigation Links -->
          <div class="intro-section__page-nav">
            <nav class="page-nav__menu">
              <a href="#courses" class="page-nav__link">
                <div class="page-nav__arrow"></div>
                <span class="page-nav__text">開講コース案内</span>
              </a>
              <a href="#process" class="page-nav__link">
                <div class="page-nav__arrow"></div>
                <span class="page-nav__text">参加までの流れ</span>
              </a>
              <a href="#archive" class="page-nav__link">
                <div class="page-nav__arrow"></div>
                <span class="page-nav__text">過去の実績</span>
              </a>
            </nav>
          </div>
        </div>
      </div>
    </section>

    <!-- ②{currentYear}年度 開講コース -->
    <section id="courses" class="courses-section content-section">
      <div class="content-section__container">
        <!-- 申込ボタン Section -->
        {buttons.length > 0 && (
          <div class="application-buttons-section fade-up">
            <div class="application-buttons-check-label">＼Check／</div>
            <div class="application-buttons-grid">
              {buttons.map((button) => {
                // 外部リンクかどうかを判定
                const isExternalLink = button.url.startsWith('http://') || button.url.startsWith('https://');
                
                return (
                  <div class="application-button-item">
                    {button.labelAbove && (
                      <p class="application-button-item__label-above" set:html={button.labelAbove.replace(/\n/g, '<br>')}></p>
                    )}
                    <div class="application-button-item__button-wrapper">
                      <a 
                        href={button.url} 
                        class="application-button-item__button base-button base-button--blue"
                        target={isExternalLink ? '_blank' : undefined}
                        rel={isExternalLink ? 'noopener noreferrer' : undefined}
                      >
                        <span class="base-button__text" set:html={button.buttonText.replace(/\n/g, '<br>')}></span>
                        <div class="base-button__icon">
                          {isExternalLink ? (
                            <div class="base-button__icon-external">
                              <svg width="16" height="16" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M18.2609 18.2609H1.73913V1.73913H6.95652V0H0.869565C0.389351 0 0 0.389351 0 0.869565V19.1304C0 19.6106 0.389351 20 0.869565 20H19.1304C19.6106 20 20 19.6106 20 19.1304V13.0435H18.2609V18.2609Z" fill="currentColor"/>
                                <path d="M19.1304 0H11.3043V1.73913H17.0311L7.21118 11.559L8.44097 12.7888L18.2609 2.96892V8.69565H20V0.869565C20 0.389351 19.6106 0 19.1304 0Z" fill="currentColor"/>
                              </svg>
                            </div>
                          ) : (
                            <div class="base-button__icon-arrow"></div>
                          )}
                        </div>
                      </a>
                      {button.labelBelow && (
                        <p class="application-button-item__label-below" set:html={button.labelBelow.replace(/\n/g, '<br>')}></p>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        <ContentSectionHeader 
          englishTitle=""
          title={`${currentYearValue} コース一覧`}
          customTitleWrapperStyle="courses-title-wrapper"
          customIconStyle="courses-icon"
          class="fade-up"
        />
        
        {courseCards.length > 0 ? (
          <div class="courses-section">
            <div class="filter-tabs">
              <button class="filter-tab filter-tab--active" data-sort="date">日付から探す</button>
              <button class="filter-tab" data-sort="category">カテゴリーから探す</button>
            </div>
            <div class="courses-container">
            
            <!-- カード色分け凡例 -->
            <div class="course-legend">
              <div class="course-legend__item">
                <div class="course-legend__color course-legend__color--job-experience"></div>
                <span class="course-legend__label">職業体験</span>
              </div>
              <div class="course-legend__item">
                <div class="course-legend__color course-legend__color--hands-on"></div>
                <span class="course-legend__label">体験活動</span>
              </div>
            </div>
            
            <!-- 時期別スクロールリンク -->
            <div class="period-scroll-links" id="period-scroll-links" 
                 data-category-order={JSON.stringify(summerCategories.map(cat => cat.category))}
                 style="display: flex; flex-wrap: wrap; gap: 8px; justify-content: center; margin: 16px 0 24px 0;">
              <a href="#" class="period-link" data-period="late-july" 
                 style="display: inline-flex; align-items: center; gap: 6px; font-size: 12px; font-weight: 600; padding: 4px 12px 4px 8px; border: 1px solid #1c0083; border-radius: 10px; white-space: nowrap; color: #1c0083; background-color: #ffffff; text-decoration: none; transition: all 0.2s ease; cursor: pointer;">
                7月下旬 <span class="period-link__arrow"></span>
              </a>
              <a href="#" class="period-link" data-period="early-august" 
                 style="display: inline-flex; align-items: center; gap: 6px; font-size: 12px; font-weight: 600; padding: 4px 12px 4px 8px; border: 1px solid #1c0083; border-radius: 10px; white-space: nowrap; color: #1c0083; background-color: #ffffff; text-decoration: none; transition: all 0.2s ease; cursor: pointer;">
                8月上旬 <span class="period-link__arrow"></span>
              </a>
              <a href="#" class="period-link" data-period="mid-august" 
                 style="display: inline-flex; align-items: center; gap: 6px; font-size: 12px; font-weight: 600; padding: 4px 12px 4px 8px; border: 1px solid #1c0083; border-radius: 10px; white-space: nowrap; color: #1c0083; background-color: #ffffff; text-decoration: none; transition: all 0.2s ease; cursor: pointer;">
                8月中旬 <span class="period-link__arrow"></span>
              </a>
              <a href="#" class="period-link" data-period="late-august" 
                 style="display: inline-flex; align-items: center; gap: 6px; font-size: 12px; font-weight: 600; padding: 4px 12px 4px 8px; border: 1px solid #1c0083; border-radius: 10px; white-space: nowrap; color: #1c0083; background-color: #ffffff; text-decoration: none; transition: all 0.2s ease; cursor: pointer;">
                8月下旬 <span class="period-link__arrow"></span>
              </a>
              <a href="#" class="period-link" data-period="anytime" 
                 style="display: inline-flex; align-items: center; gap: 6px; font-size: 12px; font-weight: 600; padding: 4px 12px 4px 8px; border: 1px solid #1c0083; border-radius: 10px; white-space: nowrap; color: #1c0083; background-color: #ffffff; text-decoration: none; transition: all 0.2s ease; cursor: pointer;">
                随時開催 <span class="period-link__arrow"></span>
              </a>
            </div>
            
            <div class="courses-grid" id="courses-grid">
              {courseCards.map(course => (
              <a href={course.href} class={`course-card ${course.courseType ? 'course-card--' + course.courseType : ''}`} data-schedule-date={course.scheduleDate || ''} data-category={course.category || ''} data-at-any-time={course.atAnyTime ? 'true' : 'false'}>
                <div class="course-card__image">
                  <img 
                    src={course.thumbImg?.url || '/images/ui/img_course-no-image-01.webp'} 
                    alt={course.title} 
                  />
                  {(() => {
                    const resolvedStatus = getCourseStatus(course, phase || '', currentYearValue);
                    return resolvedStatus && (
                      <div class="course-card__status">
                        <span class={`status-badge ${getStatusColorClass(resolvedStatus)}`}>{resolvedStatus}</span>
                      </div>
                    );
                  })()}
                  {course.hasReport && (
                    <div class="course-card__report-ribbon">
                      <div class="report-ribbon__tail"></div>
                      <div class="report-ribbon__circle">
                        <div class="report-ribbon__text">
                          <span class="report-ribbon__text-line1">実施</span><br>
                          <span class="report-ribbon__text-line2">レポート</span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
                <div class="course-card__content">
                  {/* 開催日 */}
                  {(course.scheduleDate || course.atAnyTime) && (
                    <p class="course-card__schedule-date">
                      {course.atAnyTime ? '随時開催' : formatExecutedDate(course.scheduleDate)}
                      {course.startTime && !course.atAnyTime && (
                        <span class="course-card__time">
                          {' '}{course.startTime}〜{course.endTime || ''}
                        </span>
                      )}
                    </p>
                  )}
                  {course.executedDate && (
                    <p class="course-card__executed-date">{formatExecutedDate(course.executedDate)}</p>
                  )}
                  <div class="course-card__header">
                    <h3 class="course-card__title">{course.title}</h3>
                    <div class="course-card__arrow"></div>
                  </div>
                  {/* カテゴリー名 */}
                  {course.category && (
                    <div class="course-card__category">
                      <span class="category-tag">#{(() => {
                        if (typeof course.category === 'object' && course.category?.category) {
                          return course.category.category;
                        } else if (course.category) {
                          return String(course.category);
                        } else {
                          return 'その他';
                        }
                      })()}</span>
                    </div>
                  )}
                  {course.providerNames && (
                    <p class="course-card__provider">{course.providerNames}</p>
                  )}
                  {/* 市外住民参加可否文言 */}
                  {course.residencyText && (
                    <p class="course-card__residency">{course.residencyText}</p>
                  )}
                  {course.targetGrades.length > 0 && (
                    <div class="course-card__grades">
                      {(() => {
                        const { sortedGrades } = formatTargetGrades(course.targetGrades);
                        return sortedGrades.map(grade => (
                          <span class={`target-grade target-grade--${getGradeColorClass(grade)}`}>{grade}</span>
                        ));
                      })()}
                    </div>
                  )}
                  {/* 保護者参加文言 */}
                  {course.parentJoinText && (
                    <p class="course-card__parent-join">{course.parentJoinText}</p>
                  )}
                </div>
              </a>
              ))}
            </div>
            </div>
          </div>
        ) : (
          <div class="empty-state">
            <div class="empty-state__icon">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M22 10v6M2 10l10-5 10 5-10 5z"/>
                <path d="M6 12v5c3 3 9 3 12 0v-5"/>
              </svg>
            </div>
            <p class="empty-state__description">
              現在、{currentYearValue}の講座は登録されていません。<br>
              講座が決まり次第、随時掲載いたしますので、<br class="u-br-sm">お待ちください。
            </p>
          </div>
        )}
      </div>
    </section>

    <!-- ③参加までの流れ -->
    <section id="process" class="process-section content-section">
      <div class="content-section__container">
        <ContentSectionHeader 
          englishTitle=""
          title="参加までの流れ"
          class="fade-up"
        />
        <div class="process-section__content">
          <div class="process-section__intro">
            <p>
              夏の課外授業の参加までの流れです。詳しくは下記をご確認ください。
            </p>
          </div>
          <div class="process-section__illustration">
            <img 
              src="/images/content/img_summer-course_joinflow-illustration-sp.webp" 
              alt="参加までの流れ"
              class="process-section__image process-section__image--sp"
            />
            <img 
              src="/images/content/img_summer-course_joinflow-illustration-pc.webp" 
              alt="参加までの流れ"
              class="process-section__image process-section__image--pc"
            />
          </div>
        </div>
      </div>
    </section>

    <!-- ④過去の実績 -->
    <section id="archive" class="archive-section content-section">
      <div class="content-section__container archive-section__container">
        <ContentSectionHeader 
          englishTitle=""
          title="過去の実績"
          class="fade-up"
        />
        <div class="archive-section__content">
          <div class="archive-links">
            {(() => {
              // 全講座から年度を抽出し、重複を除去
              const allYears = allCourses.map(course => {
                const courseYear = Array.isArray(course.year) ? course.year[0] : course.year;
                return courseYear;
              }).filter((year, index, self) => self.indexOf(year) === index);
              
              // 現在年度の数字部分を取得（令和7年度 → 7）
              const currentYearNum = parseInt(currentYearValue.replace('令和', '').replace('年度', ''));
              
              // 現在年度より小さい年度のみフィルタリングし、数字の降順でソート
              const pastYears = allYears
                .filter(year => year && typeof year === 'string') // undefinedと非文字列をフィルタリング
                .map(year => {
                  const yearNum = parseInt(year.replace('令和', '').replace('年度', ''));
                  return { original: year, num: yearNum };
                })
                .filter(yearObj => yearObj.num < currentYearNum)
                .sort((a, b) => b.num - a.num) // 降順ソート
                .map(yearObj => yearObj.original);
              
              return pastYears.map(year => {
                if (!year) return null;
                const yearNum = parseInt(year.replace('令和', '').replace('年度', ''));
                const urlYear = `r${yearNum.toString().padStart(2, '0')}`;
                return (
                  <a href={`/course/summer-course/${urlYear}`} class="base-button base-button--blue">
                    <span class="base-button__text">{year}</span>
                    <div class="base-button__icon">
                      <div class="base-button__icon-arrow"></div>
                    </div>
                  </a>
                );
              });
            })()}
          </div>
        </div>
      </div>
    </section>
  </main>
</BaseLayout>

<style lang="scss">
@import "../../../styles/index";

/* 共通セクションスタイル */
.content-section {
  padding: 0 0 rem(120);
  background: $background-primary;
  position: relative;
  
  @include breakpoint-up(xl) {
    padding: 0 0 rem(160);
  }

  &__container {
    padding: 0 5%;
    overflow: hidden;
    @include breakpoint-up(xl) {
      padding: 0 rem(50);
    }
  }
}

/* セクション間の装飾要素 */
.section-decoration {
  border-top-left-radius: rem(30);
  border-bottom-right-radius: rem(30);
  
  @include breakpoint-up(md) {
    border-top-left-radius: rem(60);
    border-bottom-right-radius: rem(60);
  }
  
  @include breakpoint-up(lg) {
    border-top-left-radius: rem(72);
    border-bottom-right-radius: rem(72);
  }
  
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }
}

/* ①導入セクション */
.intro-section {
  @extend .content-section;
  background: $background-primary;
  padding: rem(60) 0 rem(120);
  text-align: center;
  border-bottom-right-radius: rem(30);
  position: relative;
  
  @include breakpoint-up(md) {
    border-bottom-right-radius: rem(60);
  }
  
  @include breakpoint-up(lg) {
    border-bottom-right-radius: rem(72);
  }
  
  @include breakpoint-up(xl) {
    padding: rem(80) 0 rem(160);
  }
  
  &__container {
    position: relative;
    
    // 背景装飾SVG
    &::before {
      content: '';
      position: absolute;
      top: 0;
      right: rem(-200);
      width: rem(400);
      height: 100%;
      background-image: url('/images/content/img_line-decoration-pink-01.svg');
      background-repeat: no-repeat;
      background-position: top right;
      background-size: contain;
      opacity: 0.5;
      z-index: 0;
      pointer-events: none;
      
      @include breakpoint-up(md) {
        right: rem(-300);
        width: rem(600);
      }
      
      @include breakpoint-up(lg) {
        right: rem(-350);
        width: rem(700);
      }
    }
  }
  
  // 右下の切り欠け部分の背景色を設定（次のセクションと同色）
  &::after {
    content: '';
    position: absolute;
    bottom: 0;
    right: 0;
    width: rem(30);
    height: rem(30);
    background-color: $brand-sub-pink-low;
    z-index: -1;
    
    @include breakpoint-up(md) {
      width: rem(60);
      height: rem(60);
    }
    
    @include breakpoint-up(lg) {
      width: rem(72);
      height: rem(72);
    }
  }
  
  &__content {
    max-width: none;
    margin: 0;
    text-align: left;
    position: relative;
    z-index: 1;
  }
  
  &__title {
    @include font-ja-l(semibold);
    margin-bottom: rem(24);
    line-height: 1.4;
    
    @include breakpoint-up(lg) {
      @include font-ja-2l(semibold);
    }
  }
  
  &__title-line {
    font-size: rem(22);
    font-weight: 600;
    display: inline;
    background: linear-gradient(to bottom, transparent 8%, $brand-pink 8%, $brand-pink 98%, transparent 98%);
    color: $text-white;
    line-height: 1.6;
    padding: rem(4) rem(8) rem(2) rem(4);
    box-decoration-break: clone;
    -webkit-box-decoration-break: clone;
    
    @include breakpoint-up(md) {
      @include font-ja-l(semibold);
      padding: rem(4) rem(10) rem(2) rem(6);
    }
  }
  
  &__description {
    @include font-ja-s;
    color: $text-primary;
    line-height: 1.7;
    margin-bottom: rem(32);
    
    @include breakpoint-up(md) {
      margin-bottom: rem(48);
    }
    
    @include breakpoint-up(xl) {
      max-width: rem(1200);
    }
  }
  
  
  &__buttons {
    margin-top: rem(32);
  }
  
  // 夏の課外授業 3つのポイント
  &__points {
    margin-top: rem(80);
    text-align: center;
    
    @include breakpoint-up(lg) {
      margin: rem(80) auto;
      max-width: rem(1140);
    }
  }
  
  &__points-title {
    @include font-ja-m(semibold);
    color: $text-primary;
    margin: 0 auto rem(30);
    text-align: center;
    border-left: 8px solid $brand-pink;
    border-right: 8px solid $brand-pink;
    display: inline-block;
    padding: 0 rem(20) rem(5);
    
    @include breakpoint-up(lg) {
      @include font-ja-l(semibold);
      margin: 0 auto rem(40);
    }
  }
  
  &__points-number {
    @include font-ja-l(semibold);
    color: $brand-pink;
    line-height: 1;
    vertical-align: baseline;
    position: relative;
    bottom: rem(-2);
    
    @include breakpoint-up(lg) {
      @include font-ja-2l(semibold);
      bottom: rem(-4);
    }
  }
  
  &__points-grid {
    display: flex;
    flex-direction: column;
    gap: rem(20);
    
    @include breakpoint-up(lg) {
      flex-direction: row;
      gap: rem(30);
    }
  }
  
  &__point {
    display: flex;
    gap: 0;
    align-items: flex-start;
    background: $background-secondary;
    border-radius: $radius-l;
    
    @include breakpoint-up(lg) {
      flex-direction: column;
      text-align: center;
      flex: 1;
      border-radius: $radius-2l;
    }
  }
  
  &__point-image {
    flex-shrink: 0;
    width: rem(150);
    height: rem(150);
    
    @include breakpoint-up(lg) {
      width: 100%;
      aspect-ratio: 4/3;
      height: auto;
      margin: 0 auto;
    }
    
    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: $radius-l;
      @include breakpoint-up(lg) {
        border-radius: $radius-2l;
      }
    }
  }
  
  &__point-content {
    flex: 1;
    padding: rem(6) rem(8) rem(6) rem(12);
    text-align: left;
    
    @include breakpoint-up(md) {
      padding: rem(10) rem(15) rem(10) rem(20);
    }
    
    @include breakpoint-up(lg) {
      flex: none;
      padding: rem(15) rem(20) rem(30);
      text-align: center;
    }
  }
  
  &__point-number {
    letter-spacing: 0.1em;
    margin-bottom: 0;
    color: $brand-pink;
    
    // Point部分
    .point-text {
      @include font-en-3s(semibold);
    }
    
    // 数字部分
    .point-number {
      @include font-en-s(semibold);
    }
  }
  
  &__point-title {
    @include font-ja-s(semibold);
    color: $text-primary;
    margin-bottom: rem(12);
    
    @include breakpoint-up(lg) {
      @include font-ja-m(semibold);
    }
  }
  
  &__point-description {
    @include font-ja-2s;
    color: $text-primary;
    line-height: 1.6;
    margin: 0;
    
    @include breakpoint-up(lg) {
      @include font-ja-s;
      text-align: left;
    }
  }
  
  // ページナビゲーション
  &__page-nav {
    margin-top: rem(60);
    
    @include breakpoint-up(lg) {
      margin-top: rem(80);
    }
  }
}

/* ナビゲーションリンク */
.page-nav {
  &__menu {
    display: grid;
    width: 90%;
    margin: 0 auto;
    grid-template-columns: 1fr 1fr;
    gap: 0;

    @include breakpoint-up(sm) {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: center;
    }
  }

  &__link {
    display: flex;
    align-items: center;
    gap: rem(5);
    color: $text-primary;
    text-decoration: none;
    transition: color 0.3s ease;
    padding: rem(6) rem(10);

    @include breakpoint-up(sm) {
      gap: rem(12);
      padding: rem(6) rem(20);
      border-right: 1px solid $border-secondary;
    }

    @include breakpoint-up(xl) {
      padding: rem(6) rem(30);
    }

    &:first-child {
      @include breakpoint-up(sm) {
        padding-left: 0;
      }
    }

    &:last-child {
      border-right: none;
    }

    &:hover {
      color: $brand-pink;
      text-decoration: none;

      .page-nav__arrow {
        transform: translateY(rem(6)) rotate(45deg);
      }
    }
  }

  &__text {
    @include font-ja-s(semibold);
  }

  &__arrow {
    width: rem(9);
    height: rem(9);
    border-right: 2px solid currentColor;
    border-bottom: 2px solid currentColor;
    transform: rotate(45deg);
    transition: transform 0.3s ease;
    flex-shrink: 0;
    margin-right: rem(3);
  }
}

/* ②開講コースセクション */
.courses-section {
  @extend .section-decoration;
  background: $brand-sub-pink-low;
  
  .content-section__container {
    padding: 0 3%;
    // @include breakpoint-up(md) {
    //   padding: 0 5%;
    // }
    @include breakpoint-up(xl) {
      padding: 0 rem(50);
    }
  }
  
  &::after {
    background: linear-gradient(to bottom, $background-primary 50%, $background-primary 50%);
  }
  
}

/* 開講コースタイトルのpadding */
.courses-section .content-section__container .content-section__header .content-section__title-wrapper.courses-title-wrapper {
  padding-left: 3% !important;
  
  @include breakpoint-up(xl) {
    padding-left: 0 !important;
  }
}

/* 講座グリッド */
/* コースセクション（タブとコンテナの親要素） */
.courses-section {
  position: relative;
}

/* コースコンテナ（白背景ボックス） */
.courses-container {
  background: $background-primary;
  border-radius: $radius-l;
  padding: rem(20) rem(12);
  
  @include breakpoint-up(md) {
    padding: rem(20);
    border-radius: $radius-2l;
  }
  
  @include breakpoint-up(lg) {
    padding: rem(25);
  }
  
  @include breakpoint-up(xl) {
    padding: rem(25) rem(40);
    max-width: rem(1480);
    margin: 0 auto;
  }
}

/* フィルタータブ */
.filter-tabs {
  display: flex;
  gap: rem(4);
  z-index: 10;
  justify-content: center;
  width: 100%;
  @include breakpoint-up(lg) {
    gap: rem(10);
  }
}

.filter-tab {
  @include font-ja-s(semibold);
  padding: rem(12) rem(16);
  background: $background-secondary;
  color: $text-primary;
  border-radius: $radius-m $radius-m 0 0;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  border: none;
  
  @include breakpoint-up(md) {
    @include font-ja-s(semibold);
    padding: rem(14) rem(20);
  }
  
  &:hover {
    background: darken($background-secondary, 5%);
  }
  
  &--active {
    background: $background-primary;
    color: $text-primary;
    
    // 文字の下にピンクの下線
    &::after {
      content: '';
      position: absolute;
      bottom: rem(8);
      left: 50%;
      transform: translateX(-50%);
      width: calc(100% - #{rem(32)});
      height: rem(3);
      background: $brand-pink;
      border-radius: rem(2);
    }
    
    @include breakpoint-up(md) {
      &::after {
        bottom: rem(10);
        width: calc(100% - #{rem(40)});
      }
    }
    
    &:hover {
      background: $background-primary;
    }
  }
}

/* 凡例 */
.course-legend {
  display: flex;
  gap: rem(20);
  margin: rem(16) auto rem(20);
  align-items: center;
  justify-content: center;
  
  @include breakpoint-up(md) {
    margin: rem(20) 0 rem(24) 0;
    gap: rem(24);
  }
  
  &__item {
    display: flex;
    align-items: center;
    gap: rem(8);
  }
  
  &__color {
    width: rem(16);
    height: rem(16);
    border-radius: rem(4);
    flex-shrink: 0;
    
    @include breakpoint-up(md) {
      width: rem(20);
      height: rem(20);
      border-radius: rem(6);
    }
    
    &--job-experience {
      background-color: $brand-sub-yellow-very-low;
    }
    
    &--hands-on {
      background-color: $brand-sub-purple-very-low;
    }
  }
  
  &__label {
    @include font-ja-s(semibold);
    color: $text-primary;
    
    @include breakpoint-up(lg) {
      @include font-ja-m(semibold);
    }
  }
}

/* 時期別スクロールリンク */
.period-scroll-links {
  display: flex;
  flex-wrap: wrap;
  gap: rem(8);
  justify-content: center;
  margin: rem(16) 0 rem(24) 0;
  
  @include breakpoint-up(md) {
    gap: rem(12);
    margin: rem(20) 0 rem(30) 0;
  }
}

.period-link {
  display: inline-flex;
  align-items: center;
  gap: rem(3);
  @include font-ja-3s(semibold);
  padding: rem(2) rem(6);
  border: 1px solid $brand-black;
  border-radius: rem(7);
  white-space: nowrap;
  color: $text-primary;
  background-color: $background-primary;
  text-decoration: none;
  transition: all 0.2s ease;
  
  @include breakpoint-up(md) {
    padding: rem(3) rem(8);
  }
  
  @include breakpoint-up(lg) {
    @include font-ja-2s(semibold);
  }
  
  &:hover {
    background-color: $brand-black;
    color: $background-primary;
    text-decoration: none;
  }
  
  &__arrow {
    width: rem(6);
    height: rem(6);
    border-right: 2px solid currentColor;
    border-bottom: 2px solid currentColor;
    transform: rotate(45deg) translateY(rem(-2));
    flex-shrink: 0;
    margin-left: rem(2);
    
    @include breakpoint-up(lg) {
      width: rem(8);
      height: rem(8);
      transform: rotate(45deg) translateY(rem(-4));
    }
  }
}

.courses-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: rem(12);
  
  @include breakpoint-up(md) {
    gap: rem(18);
  }
  
  @include breakpoint-up(lg) {
    grid-template-columns: repeat(3, 1fr);
  }
  @include breakpoint-up(xl) {
    max-width: rem(1400);
    margin: 0 auto;
    gap: rem(24);
    padding-bottom: rem(48);
  }
  
  // 日付タブ表示時のスタイル
  &.date-grouped {
    display: block !important;
    
    // 子要素のカードには影響しないよう、直接のグリッドスタイルをリセット
    grid-template-columns: none !important;
    gap: 0 !important;
  }
}

/* 日付グループ */
.date-group {
  margin-bottom: rem(32);
  
  @include breakpoint-up(md) {
    margin-bottom: rem(40);
  }
}

.date-group__header {
  margin-top: rem(40);
  margin-bottom: rem(16);
  text-align: left;
  
  @include breakpoint-up(md) {
    margin-bottom: rem(20);
  }
}

.date-group__title {
  @include font-ja-m(semibold);
  color: $text-secondary;
  margin: 0;
  
  @include breakpoint-up(lg) {
    @include font-ja-l(semibold);
  }
}

.date-group__grid {
  display: grid !important;
  grid-template-columns: repeat(2, 1fr) !important;
  gap: rem(12) !important;
  
  @include breakpoint-up(md) {
    gap: rem(18) !important;
  }
  
  @include breakpoint-up(lg) {
    grid-template-columns: repeat(3, 1fr) !important;
    gap: rem(24) !important;
  }
  
  @include breakpoint-up(xl) {
    max-width: rem(1400) !important;
    margin: 0 auto !important;
    gap: rem(24) !important;
  }
}

/* コースカード */
.course-card {
  background: $background-primary;
  border-radius: $radius-m;
  overflow: hidden;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  text-decoration: none;
  color: inherit;
  display: flex;
  flex-direction: column;
  height: 100%;
  @include breakpoint-up(md) {
    border-radius: $radius-l;
  }
  
  
  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    text-decoration: none;
  }
  
  &__image {
    position: relative;
    aspect-ratio: 4 / 3;
    overflow: hidden;
    border-radius: $radius-m;

    @include breakpoint-up(md) {
      border-radius: $radius-l;
      aspect-ratio: 16 / 9;
    }
    
    &::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(to bottom, rgba(0, 0, 0, 0.2) 0%, rgba(0, 0, 0, 0.2) 5%, transparent 100%);
      pointer-events: none;
      z-index: 1;
    }
    
    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
  }
  
  &__status {
    position: absolute;
    top: rem(8);
    left: rem(8);
    z-index: 2;
    @include breakpoint-up(md) {
      top: rem(10);
      left: rem(10);
    }
    @include breakpoint-up(lg) {
      top: rem(12);
      left: rem(12);
    }
    
    img {
      height: rem(24);
      width: auto;
      
      @include breakpoint-up(md) {
        height: rem(32);
      }
    }
  }
  
  &__report-ribbon {
    position: absolute;
    bottom: rem(16);
    right: rem(8);
    z-index: 2;
    display: flex;
    flex-direction: column;
    align-items: center;
    
    @include breakpoint-up(md) {
      bottom: rem(20);
      right: rem(10);
    }
    
    @include breakpoint-up(lg) {
      bottom: rem(24);
      right: rem(12);
    }
    
    @include breakpoint-up(xl) {
      bottom: rem(32);
    }
  }
  
  &__content {
    padding: rem(12) rem(8) rem(16);
    display: flex;
    flex-direction: column;
    flex: 1;
    
    @include breakpoint-up(md) {
      padding: rem(16) rem(16) rem(20);
    }
    
    @include breakpoint-up(lg) {
      padding: rem(20) rem(20) rem(30);
    }
  }
  
  &__schedule-date {
    font-size: rem(9);
    font-weight: 600;
    color: $text-dark-gray;
    margin: 0 0 rem(8) 0;
    line-height: 1.4;
    @include breakpoint-up(md) {
      @include font-ja-2s(semibold);
    }
    
    @include breakpoint-up(md) {
      margin-bottom: rem(10);
    }
    
    @include breakpoint-up(lg) {
      margin-bottom: rem(12);
    }
  }
  
  &__time {
    color: $text-dark-gray;
    font-weight: 600;
  }
  
  &__executed-date {
    @include font-ja-3s(semibold);
    color: $text-dark-gray;
    margin: 0 0 rem(8) 0;
    line-height: 1.4;
    @include breakpoint-up(md) {
      @include font-ja-2s(semibold);
    }
    
    @include breakpoint-up(md) {
      margin-bottom: rem(10);
    }
    
    @include breakpoint-up(lg) {
      margin-bottom: rem(12);
    }
  }
  
  &__header {
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    gap: rem(8);
    margin-bottom: rem(8);
    @include breakpoint-up(md) {
      margin-bottom: rem(12);
    }
  }
  
  &__title {
    @include font-ja-2s(semibold);
    color: $text-primary;
    margin: 0;
    line-height: 1.4;
    flex: 1;
    
    @include breakpoint-up(md) {
      @include font-ja-s(semibold);
    }
    
    @include breakpoint-up(lg) {
      @include font-ja-m(semibold);
    }
  }
  
  &__arrow {
    width: rem(20);
    height: rem(20);
    background-color: $brand-pink;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    transition: all 0.3s ease;
    
    @include breakpoint-up(md) {
      width: rem(24);
      height: rem(24);
    }
    
    &::after {
      content: '';
      width: rem(6);
      height: rem(6);
      border-right: 2px solid $text-white;
      border-bottom: 2px solid $text-white;
      transform: translateX(rem(-1)) rotate(-45deg);
      
      @include breakpoint-up(md) {
        width: rem(8);
        height: rem(8);
        transform: translateX(rem(-1)) rotate(-45deg);
      }
    }
  }
  
  &:hover &__arrow {
    transform: translateX(rem(2));
  }
  
  &:hover &__image img {
    transform: scale(1.1);
  }
  
  &__provider {
    @include font-ja-3s(semibold);
    color: $text-secondary;
    margin: 0 0 rem(12) 0;
    line-height: 1.4;
    flex-grow: 1;
    
    @include breakpoint-up(md) {
      @include font-ja-2s(semibold);
    }
  }
  
  &__category {
    margin: 0;
    @include breakpoint-up(md) {
      margin: 0 0 rem(8) 0;
    }
  }
  
  &__residency {
    @include font-ja-3s(semibold);
    color: $text-dark-gray;
    margin: rem(8) 0 rem(2) 0;
    line-height: 1.4;
    @include breakpoint-up(md) {
      margin: rem(8) 0 rem(4) 0;
    }
  }
  
  &__grades {
    display: flex;
    flex-wrap: wrap;
    gap: rem(2);
    
    @include breakpoint-up(md) {
      gap: rem(6);
    }
  }
  
  &__parent-join {
    @include font-ja-3s(semibold);
    color: $text-dark-gray;
    margin: 0 0 0 0;
    line-height: 1.4;
    @include breakpoint-up(md) {
      margin: rem(2) 0 0 0;
    }
  }
}

/* 実施レポートリボン */
.report-ribbon {
  &__tail {
    position: absolute;
    left: 50%;
    top: rem(30);
    transform: translateX(-50%);
    height: 0;
    width: 0;
    border-top: rem(12) solid $text-white;
    border-left: rem(12) solid $text-white;
    border-right: rem(12) solid $text-white;
    border-bottom: rem(12) solid transparent;
    border-radius: 0 0 rem(3) rem(3);
    z-index: 1;
    
    @include breakpoint-up(md) {
      top: rem(38);
    }
    @include breakpoint-up(lg) {
      top: rem(44);
    }
    @include breakpoint-up(xl) {
      top: rem(60);
      border-top: rem(18) solid $text-white;
      border-left: rem(18) solid $text-white;
      border-right: rem(18) solid $text-white;
      border-bottom: rem(18) solid transparent;
      border-radius: 0 0 rem(5) rem(5);
    }
  }
  
  &__circle {
    width: rem(40);
    height: rem(40);
    background-color: $brand-primary;
    border: 2px solid $text-white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    z-index: 2;
    
    @include breakpoint-up(md) {
      width: rem(48);
      height: rem(48);
    }
    @include breakpoint-up(lg) {
      width: rem(52);
      height: rem(52);
    }
    @include breakpoint-up(xl) {
      width: rem(70);
      height: rem(70);
    }
  }
  
  &__text {
    color: $text-white;
    text-align: center;
    line-height: 0.6;
    padding-bottom: rem(4);
    @include breakpoint-up(md) {
      line-height: 0.7;
      padding-bottom: rem(4);
    }
    @include breakpoint-up(lg) {
      padding-bottom: 0;
    }
    @include breakpoint-up(xl) {
      line-height: 1;
      padding-bottom: rem(2);
    }
  }
  
  &__text-line1 {
    // 「実施」のスタイル
    @include font-ja-3s(semibold);
    
    @include breakpoint-up(lg) {
      @include font-ja-s(semibold);
      margin-top: rem(-1);
    }
  }
  
  &__text-line2 {
    // 「レポート」のスタイル
    @include font-ja-4s(semibold);
    margin-top: rem(-2);
    @include breakpoint-up(md) {
    }
    
    @include breakpoint-up(xl) {
      @include font-ja-3s(semibold);
      margin-top: 0;
    }
  }
}

/* ステータスバッジ */
.status-badge {
  @include font-ja-3s(semibold);
  color: $text-white;
  padding: rem(2) rem(4);
  border-radius: $radius-xs;
  white-space: nowrap;
  
  @include breakpoint-up(md) {
    @include font-ja-2s(semibold);
  }
  
  &--dark-gray {
    background: $background-dark-gray;
  }
  
  &--brand-secondary {
    background: $brand-secondary;
  }
  
  &--brand-turquoise {
    background: $brand-turquoise;
  }
  
  &--brand-pink {
    background: $brand-pink;
  }
}

/* 学年タグ（scheduleページと同じスタイル） */
/* カテゴリータグ */
.category-tag {
  font-size: rem(9);
  font-weight: 600;
  padding: rem(1) rem(3);
  border: 1px solid $brand-black;
  border-radius: rem(7);
  white-space: nowrap;
  color: $text-primary;
  background-color: $background-primary;
  display: inline-block;
  
  @include breakpoint-up(md) {
    @include font-ja-3s(semibold);
  }
  
  @include breakpoint-up(lg) {
    @include font-ja-2s(semibold);
    padding: rem(4) rem(6);
    border-radius: rem(10);
  }
}

.target-grade {
  font-size: rem(9);
  font-weight: 600;
  padding: rem(1) rem(3);
  border: 1px solid $brand-black;
  border-radius: rem(7);
  white-space: nowrap;
  margin-bottom: rem(2);
  color: $text-primary;
  
  @include breakpoint-up(md) {
    @include font-ja-3s(semibold);
  }
  
  @include breakpoint-up(lg) {
    @include font-ja-2s(semibold);
    padding: rem(4) rem(6);
    border-radius: rem(10);
  }
  
  &--elementary-low {
    background-color: $brand-sub-yellow-low;
    color: $text-primary;
  }
  
  &--elementary-high {
    background-color: $brand-sub-purple-low;
    color: $text-primary;
  }
  
  &--junior {
    background-color: $brand-sub-turquoise-low;
    color: $text-primary;
  }
  
  &--special {
    background-color: $brand-sub-pink-low;
    color: $text-primary;
  }
  
  // むなかた子ども大学の日用（学校名表示）
  &--mku-day {
    background-color: $background-primary;
    border: 1px solid $brand-black;
    color: $text-primary;
  }
}

/* 空状態 */
.empty-state {
  text-align: center;
  padding: rem(40) 0 0;
  
  @include breakpoint-up(md) {
    // padding: rem(80;
  }
  
  &__icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin-bottom: rem(32);
    
    @include breakpoint-up(md) {
      margin-bottom: rem(40);
    }
    
    svg {
      width: rem(60);
      height: rem(60);
      color: $brand-primary;
      
      @include breakpoint-up(md) {
        width: rem(80);
        height: rem(80);
      }
    }
  }
  
  &__description {
    @include font-ja-s;
    color: $text-primary;
    line-height: 1.7;
    margin: 0;
  }
}

/* ③参加までの流れセクション */
.process-section {
  @extend .section-decoration;
  background: $background-primary;
  
  &::after {
    background: linear-gradient(to bottom, $brand-sub-pink-low 50%, $background-secondary 50%);
  }
  
  &__content {
    text-align: center;
  }
  
  &__intro {
    text-align: left;
    margin-bottom: rem(40);
    
    @include breakpoint-up(md) {
      margin-bottom: rem(48);
    }
    
    @include breakpoint-up(lg) {
      margin-bottom: rem(56);
    }
    
    p {
      @include font-ja-s;
      color: $text-primary;
      line-height: 1.7;
      margin: 0;
    }
  }
  
  &__illustration {
    max-width: rem(800);
    margin: 0 auto;
    
    @include breakpoint-up(md) {
      max-width: rem(1000);
    }
    
    @include breakpoint-up(lg) {
      max-width: rem(1200);
    }
  }
  
  &__image {
    width: 100%;
    height: auto;
    
    &--sp {
      display: block;
      
      @include breakpoint-up(sm) {
        display: none;
      }
    }
    
    &--pc {
      display: none;
      
      @include breakpoint-up(sm) {
        display: block;
      }
    }
  }
}

/* ④過去の実績セクション */
.archive-section {
  background: $background-secondary;
  border-top-left-radius: rem(30);
  position: relative;
  overflow: hidden;
  padding-bottom: 0;
  
  @include breakpoint-up(md) {
    border-top-left-radius: rem(60);
  }
  
  @include breakpoint-up(lg) {
    border-top-left-radius: rem(72);
  }
  
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: $background-primary;
    z-index: -1;
  }
  
  &__container {
    position: relative;
    
    // 背景装飾SVG
    &::before {
      content: '';
      position: absolute;
      bottom: rem(-20);
      right: rem(-50);
      width: rem(200);
      height: rem(200);
      background-image: url('/logos/mark-del_mku_white.svg');
      background-repeat: no-repeat;
      background-position: center;
      background-size: contain;
      opacity: 0.5;
      z-index: 1;
      pointer-events: none;
      
      @include breakpoint-up(md) {
        right: rem(-60);
        width: rem(250);
        height: rem(250);
      }
      
      @include breakpoint-up(lg) {
        bottom: 0;
        right: rem(-40);
        width: rem(300);
        height: rem(300);
      }
    }
  }
  
  &__content {
    text-align: center;
    position: relative;
    z-index: 1;
    padding-bottom: rem(80);
    @include breakpoint-up(md) {
      padding-bottom: rem(100);
    }
    @include breakpoint-up(lg) {
      padding-bottom: rem(120);
    }
  }
}

/* アーカイブリンク */
.archive-links {
  display: flex;
  justify-content: center;
  gap: rem(16);
  flex-wrap: wrap;
  
  @include breakpoint-up(md) {
    gap: rem(24);
    justify-content: flex-start;
    margin: 0 auto;
  }
  
  .base-button {
    color: $text-white;
    text-decoration: none;
    
    &:hover {
      text-decoration: none;
      color: $text-primary;
    }
  }
}

/* 申込ボタンセクション */
.application-buttons-section {
  margin-top: rem(60);
  
  @include breakpoint-up(md) {
    margin-top: rem(80);
  }
  
  @include breakpoint-up(lg) {
    margin-top: rem(100);
  }
}

.application-buttons-check-label {
  @include font-ja-l(semibold);
  color: $brand-pink;
  text-align: center;
  margin-bottom: rem(10);
  animation: checkScale 2s ease-in-out infinite;
  
  @include breakpoint-up(lg) {
    @include font-ja-2l(semibold);
    margin-bottom: rem(10);
  }
}

.application-buttons-grid {
  display: flex;
  flex-direction: column;
  gap: rem(20);
  align-items: center;
  
  @include breakpoint-up(lg) {
    display: grid;
    gap: rem(24);
    max-width: rem(900);
    margin: 0 auto;
    justify-items: stretch;
    align-items: stretch;
    
    // 1つの場合：中央配置
    &:has(.application-button-item:only-child) {
      grid-template-columns: 1fr;
      justify-items: center;
      max-width: rem(500);
    }
    
    // 2つ以上の場合：2列グリッド
    &:not(:has(.application-button-item:only-child)) {
      grid-template-columns: 1fr 1fr;
    }
  }
  
  @include breakpoint-up(xl) {
    max-width: rem(1000);
    
    &:has(.application-button-item:only-child) {
      max-width: rem(550);
    }
  }
}

.application-button-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  width: 100%;
  max-width: rem(420);
  padding: rem(28) rem(18);
  border: 2px solid $brand-pink;
  border-radius: $radius-m;
  background-color: $background-primary !important;
  background-image: 
    radial-gradient(circle, #fec8e3 1px, transparent 1px),
    radial-gradient(circle, #fec8e3 1px, transparent 1px) !important;
  background-position: 0 0, 6.5px 6.5px !important;
  background-size: 13px 13px !important;
  animation: buttonBoxScale 2.5s ease-in-out infinite;
  
  @include breakpoint-up(md) {
    padding: rem(36) rem(20) !important;
    border-radius: $radius-l;
    max-width: rem(480);
  }
  
  @include breakpoint-up(lg) {
    padding: rem(32) rem(30);
    
    // 複数ボタンの場合：max-widthなし（stretch）
    .application-buttons-grid:not(:has(.application-button-item:only-child)) & {
      max-width: none;
    }
    
    // 単体ボタンの場合：適切なmax-width維持
    .application-buttons-grid:has(.application-button-item:only-child) & {
      max-width: rem(480);
    }
  }
  
  @include breakpoint-up(xl) {
    padding: rem(40) rem(40) !important;
    
    // 複数ボタンの場合：max-widthなし（stretch）
    .application-buttons-grid:not(:has(.application-button-item:only-child)) & {
      max-width: none;
    }
    
    // 単体ボタンの場合：適切なmax-width維持
    .application-buttons-grid:has(.application-button-item:only-child) & {
      max-width: rem(520);
    }
  }
  
  &__label-above {
    @include font-ja-s(semibold);
    color: $text-secondary;
    margin: 0 0 rem(16) 0;
    text-align: left;
    line-height: 1.6;
    
    @include breakpoint-up(md) {
      margin-bottom: rem(20);
    }
  }
  
  &__button-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex-grow: 1;
    justify-content: center;
    margin-top: rem(16);
    
    @include breakpoint-up(md) {
      margin-top: rem(20);
    }
  }
  
  &__button {
    color: $text-white !important;
    text-decoration: none !important;
    
    &:hover {
      color: $text-white !important;
      text-decoration: none !important;
    }
    
    &:focus {
      color: $text-white !important;
      text-decoration: none !important;
    }
    
    &:visited {
      color: $text-white !important;
      text-decoration: none !important;
    }
    
    .base-button__text {
      color: $text-white !important;
    }
  }
  
  &__label-below {
    @include font-ja-s(semibold);
    color: $text-primary;
    margin: rem(5) 0 0 0;
    text-align: center;
    line-height: 1.6;
    
    @include breakpoint-up(md) {
      // margin-top: rem(20);
    }
  }
}

/* 外部リンクアイコン（SVG） */
:global(.base-button__icon-external) {
  width: rem(16);
  height: rem(16);
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.5s ease;
  
  svg {
    width: 100%;
    height: 100%;
    transition: all 0.5s ease;
  }
}

// ブルーボタン用の外部リンクアイコン
:global(.base-button--blue .base-button__icon-external) {
  color: $brand-primary;
}

:global(.base-button--blue:hover .base-button__icon-external) {
  color: $brand-secondary;
  transform: rotate(360deg);
}

// ホワイトボタン用の外部リンクアイコン
:global(.base-button--white .base-button__icon-external) {
  color: $background-primary;
}

:global(.base-button--white:hover .base-button__icon-external) {
  color: $brand-secondary;
  transform: rotate(360deg);
}

// ピンクボタン用の外部リンクアイコン
:global(.base-button--pink .base-button__icon-external) {
  color: $brand-pink;
}

:global(.base-button--pink:hover .base-button__icon-external) {
  color: $brand-secondary;
  transform: rotate(360deg);
}

/* スケールアニメーション */
@keyframes checkScale {
  0%, 100% { 
    transform: scale(1); 
  }
  50% { 
    transform: scale(1.08); 
  }
}

@keyframes buttonBoxScale {
  0%, 100% { 
    transform: scale(1); 
  }
  40% { 
    transform: scale(1.02); 
  }
  60% { 
    transform: scale(1.02); 
  }
}

/* 講座種別による背景色 */
div.courses-grid a.course-card.course-card--職業体験 {
  background: $brand-sub-yellow-very-low !important;
}

div.courses-grid a.course-card.course-card--体験活動 {
  background: $brand-sub-purple-very-low !important;
}

</style>

<script>
// クライアントサイド用のUTC→JST変換関数
function convertUTCToJST(utcDateString) {
  if (!utcDateString) return null;
  try {
    const utcDate = new Date(utcDateString);
    if (isNaN(utcDate.getTime())) return null;
    // UTC時刻に+9時間を追加してJSTに変換
    const jstDate = new Date(utcDate.getTime() + (9 * 60 * 60 * 1000));
    return jstDate;
  } catch (error) {
    console.error('Error converting UTC to JST:', error);
    return null;
  }
}

// クライアントサイド用のJST日付部分抽出関数
function extractJSTDateParts(jstDate) {
  if (!jstDate || isNaN(jstDate.getTime())) return null;
  try {
    // JSTに変換済みのDateオブジェクトからUTCメソッドで値を取得
    // (すでに+9時間されているため、UTCメソッドでJSTの値が取得できる)
    return {
      year: jstDate.getUTCFullYear(),
      month: jstDate.getUTCMonth() + 1, // 0ベースなので+1
      day: jstDate.getUTCDate()
    };
  } catch (error) {
    console.error('Error extracting JST date parts:', error);
    return null;
  }
}

// 自動スクロール機能
document.addEventListener('DOMContentLoaded', function() {
  const navLinks = document.querySelectorAll('.page-nav__link');
  
  navLinks.forEach(link => {
    link.addEventListener('click', function(e) {
      e.preventDefault();
      
      const href = this.getAttribute('href');
      const targetId = href?.substring(1);
      const targetElement = targetId ? document.getElementById(targetId) : null;
      
      if (targetElement) {
        const headerHeight = 80; // ヘッダーの高さ分のオフセット
        const elementPosition = targetElement.getBoundingClientRect().top;
        const offsetPosition = elementPosition + window.pageYOffset - headerHeight;

        window.scrollTo({
          top: offsetPosition,
          behavior: 'smooth'
        });
      }
    });
  });
});

// フィルタータブの切り替え機能
document.addEventListener('DOMContentLoaded', function() {
  const filterTabs = document.querySelectorAll('.filter-tab');
  const coursesGrid = document.querySelector('#courses-grid');
  const periodScrollLinks = document.querySelector('#period-scroll-links');
  
  if (filterTabs.length === 0 || !coursesGrid) return;
  
  // カテゴリーマスターデータ（APIレコード順）をHTMLから取得
  const categoryOrderData = periodScrollLinks.getAttribute('data-category-order');
  const categoryOrder = categoryOrderData ? JSON.parse(categoryOrderData) : [];
  
  // 元のカードを保存
  const originalCards = Array.from(coursesGrid.children);
  
  // デバッグ：各カードのdata属性を確認
  console.log('All cards data attributes:');
  originalCards.forEach((card, index) => {
    const title = card.querySelector('.course-card__title')?.textContent || 'No title';
    console.log(`Card ${index} (${title}):`, {
      scheduleDate: card.dataset.scheduleDate,
      atAnyTime: card.dataset.atAnyTime,
      category: card.dataset.category,
      hasAtAnyTimeAttribute: card.hasAttribute('data-at-any-time'),
      atAnyTimeValue: card.getAttribute('data-at-any-time')
    });
  });
  
  // UTC日付をJSTに変換してフォーマットする関数
  function formatDateForDisplay(utcDateString) {
    if (!utcDateString) return '';
    
    const jstDate = convertUTCToJST(utcDateString);
    if (!jstDate) return '';
    
    const dateParts = extractJSTDateParts(jstDate);
    if (!dateParts) return '';
    
    const { year, month, day } = dateParts;
    const weekdays = ['日', '月', '火', '水', '木', '金', '土'];
    const weekday = weekdays[jstDate.getUTCDay()];
    
    return `${year}年${month}月${day}日(${weekday})`;
  }
  
  // 日付でグループ化する関数
  function groupByDate(cards) {
    const groups = {};
    
    cards.forEach((card, index) => {
      const dateAttr = card.dataset.scheduleDate;
      const atAnyTime = card.dataset.atAnyTime === 'true';
      const title = card.querySelector('.course-card__title')?.textContent || 'No title';
      console.log(`Card ${index} (${title.substring(0, 20)}...):`, {
        dateAttr,
        atAnyTime,
        datasetAtAnyTime: card.dataset.atAnyTime,
        hasAtAnyTimeAttr: card.hasAttribute('data-at-any-time')
      });
      
      let groupKey;
      if (atAnyTime) {
        // 随時開催の場合
        console.log(`🎯 Card "${title.substring(0, 20)}..." assigned to 随時開催 group`);
        groupKey = '随時開催';
      } else if (dateAttr) {
        // 日付指定の場合
        const formattedDate = formatDateForDisplay(dateAttr);
        if (!formattedDate) return;
        groupKey = formattedDate;
      } else {
        // 日付もatAnyTimeも設定されていない場合はスキップ
        return;
      }
      
      console.log('Group key:', groupKey);
      if (!groups[groupKey]) {
        groups[groupKey] = [];
      }
      groups[groupKey].push(card);
    });
    
    console.log('Final groups:', groups);
    return groups;
  }
  
  // 日付グループ表示を作成
  function renderDateGroups(groups) {
    console.log('renderDateGroups called with:', groups);
    coursesGrid.innerHTML = '';
    coursesGrid.classList.add('date-grouped');
    
    // 日付順にソート（「随時開催」は最後）
    const sortedDates = Object.keys(groups).sort((a, b) => {
      // 「随時開催」は常に最後
      if (a === '随時開催') return 1;
      if (b === '随時開催') return -1;
      
      // 両方とも日付の場合は日付順
      const jstDateA = convertUTCToJST(groups[a][0].dataset.scheduleDate);
      const jstDateB = convertUTCToJST(groups[b][0].dataset.scheduleDate);
      return jstDateA - jstDateB;
    });
    
    console.log('sortedDates:', sortedDates);
    
    sortedDates.forEach(date => {
      const dateGroup = document.createElement('div');
      dateGroup.className = 'date-group';
      
      const header = document.createElement('div');
      header.className = 'date-group__header';
      header.style.marginTop = '40px';
      header.style.marginBottom = '16px';
      header.style.textAlign = 'left';
      
      const title = document.createElement('h3');
      title.className = 'date-group__title';
      title.style.margin = '0';
      title.style.color = '#1c0083'; // $text-secondary
      title.style.fontWeight = '600'; // semibold
      title.style.lineHeight = '1.4';
      title.textContent = date;
      
      const grid = document.createElement('div');
      grid.className = 'date-group__grid';
      grid.style.display = 'grid';
      
      // レスポンシブ対応
      function setResponsiveStyles() {
        const width = window.innerWidth;
        if (width >= 1200) { // xl以降
          title.style.fontSize = '32px'; // ja-l
          grid.style.gridTemplateColumns = 'repeat(3, 1fr)';
          grid.style.gap = '24px';
          header.style.marginTop = '64px';
          header.style.marginBottom = '20px';
        } else if (width >= 1024) { // lg~xl未満
          title.style.fontSize = '32px'; // ja-l
          grid.style.gridTemplateColumns = 'repeat(3, 1fr)';
          grid.style.gap = '18px';
          header.style.marginTop = '54px';
          header.style.marginBottom = '20px';
        } else if (width >= 768) { // md~lg未満
          title.style.fontSize = '20px'; // ja-m
          grid.style.gridTemplateColumns = 'repeat(2, 1fr)';
          grid.style.gap = '18px';
          header.style.marginTop = '40px';
          header.style.marginBottom = '20px';
        } else { // sm未満
          title.style.fontSize = '20px'; // ja-m
          grid.style.gridTemplateColumns = 'repeat(2, 1fr)';
          grid.style.gap = '12px';
          header.style.marginTop = '40px';
          header.style.marginBottom = '16px';
        }
      }
      
      setResponsiveStyles();
      window.addEventListener('resize', setResponsiveStyles);
      
      header.appendChild(title);
      dateGroup.appendChild(header);
      dateGroup.appendChild(grid);
      
      groups[date].forEach(card => {
        grid.appendChild(card);
      });
      
      coursesGrid.appendChild(dateGroup);
    });
  }
  
  // カテゴリーでグループ化する関数
  function groupByCategory(cards) {
    const groups = {};
    
    cards.forEach(card => {
      // .category-tag要素からカテゴリ名を取得（#を除去）
      const categoryTagElement = card.querySelector('.category-tag');
      const category = categoryTagElement ? 
        categoryTagElement.textContent.replace('#', '').trim() : 'その他';
      
      if (!groups[category]) {
        groups[category] = [];
      }
      groups[category].push(card);
    });
    
    return groups;
  }
  
  // カテゴリーグループ表示
  function renderCategoryGroups(groups) {
    coursesGrid.innerHTML = '';
    coursesGrid.classList.add('date-grouped'); // 同じスタイルを使用
    
    // カテゴリーをAPIレコード順にソート
    const categoryNames = Object.keys(groups);
    const sortedCategories = categoryOrder.filter(catName => categoryNames.includes(catName));
    
    console.log('sortedCategories:', sortedCategories);
    
    sortedCategories.forEach(category => {
      const categoryGroup = document.createElement('div');
      categoryGroup.className = 'date-group';
      
      const header = document.createElement('div');
      header.className = 'date-group__header';
      header.style.marginTop = '40px';
      header.style.marginBottom = '16px';
      header.style.textAlign = 'left';
      
      const title = document.createElement('h3');
      title.className = 'date-group__title';
      title.style.margin = '0';
      title.style.color = '#1c0083'; // $text-secondary
      title.style.fontWeight = '600'; // semibold
      title.style.lineHeight = '1.4';
      title.textContent = String(category);
      
      const grid = document.createElement('div');
      grid.className = 'date-group__grid';
      grid.style.display = 'grid';
      
      // レスポンシブ対応
      function setResponsiveStyles() {
        const width = window.innerWidth;
        if (width >= 1200) { // xl以降
          title.style.fontSize = '32px'; // ja-l
          grid.style.gridTemplateColumns = 'repeat(3, 1fr)';
          grid.style.gap = '24px';
          header.style.marginTop = '64px';
          header.style.marginBottom = '20px';
        } else if (width >= 1024) { // lg~xl未満
          title.style.fontSize = '32px'; // ja-l
          grid.style.gridTemplateColumns = 'repeat(3, 1fr)';
          grid.style.gap = '18px';
          header.style.marginTop = '54px';
          header.style.marginBottom = '20px';
        } else if (width >= 768) { // md~lg未満
          title.style.fontSize = '20px'; // ja-m
          grid.style.gridTemplateColumns = 'repeat(2, 1fr)';
          grid.style.gap = '18px';
          header.style.marginTop = '40px';
          header.style.marginBottom = '20px';
        } else { // sm未満
          title.style.fontSize = '20px'; // ja-m
          grid.style.gridTemplateColumns = 'repeat(2, 1fr)';
          grid.style.gap = '12px';
          header.style.marginTop = '32px';
          header.style.marginBottom = '16px';
        }
      }
      
      setResponsiveStyles();
      window.addEventListener('resize', setResponsiveStyles);
      
      header.appendChild(title);
      categoryGroup.appendChild(header);
      categoryGroup.appendChild(grid);
      
      groups[category].forEach(card => {
        grid.appendChild(card);
      });
      
      coursesGrid.appendChild(categoryGroup);
    });
  }
  
  // UTC日付をJSTに変換して時期に分類する関数
  function getDatePeriod(utcDateString) {
    if (!utcDateString) return null;
    
    const jstDate = convertUTCToJST(utcDateString);
    if (!jstDate) return null;
    
    const dateParts = extractJSTDateParts(jstDate);
    if (!dateParts) return null;
    
    const { month, day } = dateParts;
    
    if (month === 7 && day >= 15) {
      return 'late-july';
    } else if (month === 8 && day >= 1 && day <= 10) {
      return 'early-august';
    } else if (month === 8 && day >= 11 && day <= 20) {
      return 'mid-august';
    } else if (month === 8 && day >= 21 && day <= 31) {
      return 'late-august';
    }
    
    return null;
  }

  // 日付タブ用スクロールリンクイベントリスナーを追加する関数
  function attachDateScrollListeners() {
    const periodLinks = document.querySelectorAll('.period-link');
    
    periodLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const period = this.dataset.period;
        let targetElement = null;
        
        if (period === 'anytime') {
          // 随時開催グループを探す
          targetElement = document.querySelector('.date-group__header:last-child');
          const headers = document.querySelectorAll('.date-group__header');
          headers.forEach(header => {
            if (header.textContent.includes('随時開催')) {
              targetElement = header;
            }
          });
        } else {
          // 指定された時期の最初の日付グループを探す
          const dateHeaders = document.querySelectorAll('.date-group__header');
          dateHeaders.forEach(header => {
            const headerText = header.textContent;
            // ヘッダーから日付を抽出して時期判定
            const dateMatch = headerText.match(/(\d{4})年(\d{1,2})月(\d{1,2})日/);
            if (dateMatch) {
              const [, year, month, day] = dateMatch;
              const dateString = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
              const headerPeriod = getDatePeriod(dateString);
              if (headerPeriod === period && !targetElement) {
                targetElement = header;
              }
            }
          });
        }
        
        if (targetElement) {
          // ヘッダーの高さ分のオフセット（xl以上では追加マージン）
          const isXlOrLarger = window.innerWidth >= 1280;
          const headerHeight = isXlOrLarger ? 120 : 80;
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - headerHeight;

          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        }
      });
    });
  }

  // 日付タブ用スクロールリンクを復元する関数
  function updateDateScrollLinks() {
    console.log('updateDateScrollLinks called');
    const periodScrollLinks = document.querySelector('#period-scroll-links');
    if (!periodScrollLinks) return;
    
    // 既存のリンクをクリア
    periodScrollLinks.innerHTML = '';
    
    // 日付タブ用の静的なボタンを作成
    const dateButtons = [
      { period: 'late-july', text: '7月下旬' },
      { period: 'early-august', text: '8月上旬' },
      { period: 'mid-august', text: '8月中旬' },
      { period: 'late-august', text: '8月下旬' },
      { period: 'anytime', text: '随時開催' }
    ];
    
    dateButtons.forEach(buttonData => {
      const link = document.createElement('a');
      link.className = 'period-link';
      link.href = '#';
      link.dataset.period = buttonData.period;
      
      // インラインスタイルを適用（基本は12px、lg以上は14px）
      link.style.display = 'inline-flex';
      link.style.alignItems = 'center';
      link.style.gap = '6px';
      link.style.fontSize = '12px';
      link.style.fontWeight = '600';
      link.style.padding = '4px 12px 4px 8px';
      link.style.border = '1px solid #1c0083';
      link.style.borderRadius = '10px';
      link.style.whiteSpace = 'nowrap';
      link.style.color = '#1c0083';
      link.style.backgroundColor = '#ffffff';
      link.style.textDecoration = 'none';
      link.style.transition = 'all 0.2s ease';
      link.style.cursor = 'pointer';
      
      // レスポンシブ対応（lg以上では14px）
      const updateResponsiveStyles = () => {
        const width = window.innerWidth;
        if (width >= 1024) { // lg以上
          link.style.fontSize = '14px';
        } else {
          link.style.fontSize = '12px';
        }
      };
      updateResponsiveStyles();
      window.addEventListener('resize', updateResponsiveStyles);
      
      // アロー要素を作成（レスポンシブ対応）
      const arrow = document.createElement('span');
      arrow.className = 'period-link__arrow';
      
      // アローのレスポンシブスタイリング
      const updateArrowStyles = () => {
        const width = window.innerWidth;
        if (width >= 1024) { // lg以上
          arrow.style.width = '8px';
          arrow.style.height = '8px';
          arrow.style.transform = 'rotate(45deg) translateY(-4px)';
        } else {
          arrow.style.width = '6px';
          arrow.style.height = '6px';
          arrow.style.transform = 'rotate(45deg) translateY(-2px)';
        }
        arrow.style.borderRight = '2px solid currentColor';
        arrow.style.borderBottom = '2px solid currentColor';
        arrow.style.flexShrink = '0';
        arrow.style.marginLeft = '0px';
      };
      updateArrowStyles();
      window.addEventListener('resize', updateArrowStyles);
      
      // テキストとアローを追加
      link.textContent = buttonData.text;
      link.appendChild(arrow);
      
      // ホバー効果を追加
      link.addEventListener('mouseenter', function() {
        this.style.backgroundColor = '#1c0083';
        this.style.color = '#ffffff';
      });
      
      link.addEventListener('mouseleave', function() {
        this.style.backgroundColor = '#ffffff';
        this.style.color = '#1c0083';
      });
      
      periodScrollLinks.appendChild(link);
    });
    
    // 新しく作成されたボタンにイベントリスナーをアタッチ
    attachDateScrollListeners();
    
    console.log('Date scroll links restored');
  }

  // カテゴリー別スクロールリンクを更新する関数
  function updateCategoryScrollLinks(categoryGroups) {
    const periodScrollLinks = document.querySelector('#period-scroll-links');
    if (!periodScrollLinks) return;
    
    // 既存のリンクをクリア
    periodScrollLinks.innerHTML = '';
    
    // カテゴリー名をAPIレコード順にソート
    const categoryNames = Object.keys(categoryGroups);
    const sortedCategories = categoryOrder.filter(catName => categoryNames.includes(catName));
    
    sortedCategories.forEach(category => {
      const link = document.createElement('a');
      link.className = 'period-link';
      link.href = '#';
      link.dataset.category = category;
      
      // インラインスタイルを適用（基本は12px、lg以上は14px）
      link.style.display = 'inline-flex';
      link.style.alignItems = 'center';
      link.style.gap = '6px';
      link.style.fontSize = '12px';
      link.style.fontWeight = '600';
      link.style.padding = '4px 12px 4px 8px';
      link.style.border = '1px solid #1c0083';
      link.style.borderRadius = '10px';
      link.style.whiteSpace = 'nowrap';
      link.style.color = '#1c0083';
      link.style.backgroundColor = '#ffffff';
      link.style.textDecoration = 'none';
      link.style.transition = 'all 0.2s ease';
      link.style.cursor = 'pointer';
      
      // レスポンシブ対応（lg以上では14px）
      const updateResponsiveStylesCategory = () => {
        const width = window.innerWidth;
        if (width >= 1024) { // lg以上
          link.style.fontSize = '14px';
        } else {
          link.style.fontSize = '12px';
        }
      };
      updateResponsiveStylesCategory();
      window.addEventListener('resize', updateResponsiveStylesCategory);
      
      // アロー要素を作成（レスポンシブ対応）
      const arrow = document.createElement('span');
      arrow.className = 'period-link__arrow';
      
      // アローのレスポンシブスタイリング
      const updateArrowStyles = () => {
        const width = window.innerWidth;
        if (width >= 1024) { // lg以上
          arrow.style.width = '8px';
          arrow.style.height = '8px';
          arrow.style.transform = 'rotate(45deg) translateY(-4px)';
        } else {
          arrow.style.width = '6px';
          arrow.style.height = '6px';
          arrow.style.transform = 'rotate(45deg) translateY(-2px)';
        }
        arrow.style.borderRight = '2px solid currentColor';
        arrow.style.borderBottom = '2px solid currentColor';
        arrow.style.flexShrink = '0';
        arrow.style.marginLeft = '0px';
      };
      updateArrowStyles();
      window.addEventListener('resize', updateArrowStyles);
      
      // テキストとアローを追加
      link.textContent = '#' + String(category);
      link.appendChild(arrow);
      
      // ホバー効果を追加
      link.addEventListener('mouseenter', function() {
        this.style.backgroundColor = '#1c0083';
        this.style.color = '#ffffff';
      });
      
      link.addEventListener('mouseleave', function() {
        this.style.backgroundColor = '#ffffff';
        this.style.color = '#1c0083';
      });
      
      // スクロール機能を追加
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const headers = document.querySelectorAll('.date-group__header');
        let targetElement = null;
        
        headers.forEach(header => {
          const titleElement = header.querySelector('.date-group__title');
          if (titleElement && titleElement.textContent === category) {
            targetElement = header;
          }
        });
        
        if (targetElement) {
          // ヘッダーの高さ分のオフセット（xl以上では追加マージン）
          const isXlOrLarger = window.innerWidth >= 1280;
          const headerHeight = isXlOrLarger ? 120 : 80;
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - headerHeight;

          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        }
      });
      
      periodScrollLinks.appendChild(link);
    });
  }
  
  filterTabs.forEach(tab => {
    tab.addEventListener('click', function() {
      // アクティブ状態を切り替え
      filterTabs.forEach(t => t.classList.remove('filter-tab--active'));
      this.classList.add('filter-tab--active');
      
      const sortType = this.dataset.sort;
      
      if (sortType === 'date') {
        // 日付でグループ化
        const dateGroups = groupByDate(originalCards);
        renderDateGroups(dateGroups);
        // 日付タブ用の静的スクロールリンクに復元
        updateDateScrollLinks();
        if (periodScrollLinks) {
          periodScrollLinks.style.display = 'flex';
        }
      } else if (sortType === 'category') {
        // カテゴリーでグループ化
        const categoryGroups = groupByCategory(originalCards);
        renderCategoryGroups(categoryGroups);
        // カテゴリー別スクロールリンクを更新
        updateCategoryScrollLinks(categoryGroups);
        if (periodScrollLinks) {
          periodScrollLinks.style.display = 'flex';
        }
      }
    });
  });
  
  // 初期表示は日付タブがアクティブなので、日付グループ表示にする
  const dateGroups = groupByDate(originalCards);
  renderDateGroups(dateGroups);
  // 初期表示時もイベントリスナーをアタッチ
  updateDateScrollLinks();
  
  // 静的要素にもホバー効果を追加
  const existingLinks = document.querySelectorAll('.period-link');
  existingLinks.forEach(link => {
    link.addEventListener('mouseenter', function() {
      this.style.backgroundColor = '#1c0083';
      this.style.color = '#ffffff';
    });
    
    link.addEventListener('mouseleave', function() {
      this.style.backgroundColor = '#ffffff';
      this.style.color = '#1c0083';
    });
  });
});
</script>