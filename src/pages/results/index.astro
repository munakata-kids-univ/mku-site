---
import BaseLayout from "../../layouts/BaseLayout.astro";
import HeroSection from "../../components/HeroSection.astro";
import Breadcrumb from "../../components/Breadcrumb.astro";
import ContentSectionHeader from "../../components/ContentSectionHeader.astro";
import { getMainCampusSettings, getSpecialCourses } from "../../lib/microcms.ts";

const breadcrumbItems = [
  { href: "/", label: "ホーム" },
  { label: "当選者発表" }
];

// メインキャンパス設定からbuttonsデータを取得（参加意向確認以外）
const mainCampusSettings = await getMainCampusSettings();
const buttons = mainCampusSettings.buttons?.filter((button: any) => {
  const buttonType = Array.isArray(button.type) ? button.type[0] : button.type;
  return button.visible && buttonType !== "参加意向確認";
}) || [];

// 特設講座データを取得してボタンが存在するもののみフィルタリング
const specialCourses = await getSpecialCourses();
const specialCoursesWithButtons = specialCourses.filter((course: any) => {
  if (!course.buttons) return false;
  const filteredButtons = course.buttons.filter((button: any) => {
    const buttonType = Array.isArray(button.type) ? button.type[0] : button.type;
    return button.visible && buttonType !== "参加意向確認";
  });
  return filteredButtons.length > 0;
});
---

<BaseLayout title="当選者発表" description="むなかた子ども大学各講座の当選結果を掲載するページです。令和7年度メインキャンパスや特設講座にお申し込みいただいた皆さまの当選番号を一覧でご確認いただけます。">
  <main>
    <HeroSection 
      title="当選者発表"
      subtitle="Results"
      customBackgroundStyle="hero--results"
      showImage={false}
    />

    <Breadcrumb items={breadcrumbItems} />

    <!-- Introduction Section -->
    <section class="introduction">
      <div class="introduction__container">
        <p class="introduction__text">
          こちらは「むなかた子ども大学」各講座の当選結果を掲載するページです。<br>
          令和7年度メインキャンパスや特設講座にお申し込みいただいた皆さまの当選番号を一覧でご確認いただけます。<br>
          お手持ちの応募番号と照合のうえ、参加手続きの詳細をお進めください。
        </p>
      </div>
    </section>

    <!-- Navigation Links -->
    <section class="page-nav">
      <div class="page-nav__container">
        <nav class="page-nav__menu">
          <a href="#main-campus" class="page-nav__link">
            <div class="page-nav__arrow"></div>
            <span class="page-nav__text">メインキャンパス</span>
          </a>
          <a href="#special-course" class="page-nav__link">
            <div class="page-nav__arrow"></div>
            <span class="page-nav__text">特設講座</span>
          </a>
        </nav>
      </div>
    </section>

    <!-- メインキャンパス Section -->
    <section id="main-campus" class="content-section">
      <div class="content-section__container">
        <ContentSectionHeader 
          englishTitle=""
          title="メインキャンパス"
          class="fade-up"
        />
        
        <div class="results-content">
          {buttons.length > 0 ? (
            <div class="application-buttons-section">
              <div class={`application-buttons-grid ${buttons.length === 1 ? 'application-buttons-grid--single' : ''}`}>
                {buttons.map((button) => {
                  // 外部リンクかどうかを判定
                  const isExternalLink = button.url.startsWith('http://') || button.url.startsWith('https://');
                  
                  return (
                    <div class="application-button-item">
                      {button.labelAbove && (
                        <p class="application-button-item__label-above" set:html={button.labelAbove.replace(/\n/g, '<br>')}></p>
                      )}
                      <div class="application-button-item__button-wrapper">
                        <a 
                          href={button.url} 
                          class="application-button-item__button base-button base-button--blue"
                          target={isExternalLink ? '_blank' : undefined}
                          rel={isExternalLink ? 'noopener noreferrer' : undefined}
                        >
                          <span class="base-button__text" set:html={button.buttonText.replace(/\n/g, '<br>')}></span>
                          <div class="base-button__icon">
                            {isExternalLink ? (
                              <div class="base-button__icon-external">
                                <svg width="16" height="16" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                  <path d="M18.2609 18.2609H1.73913V1.73913H6.95652V0H0.869565C0.389351 0 0 0.389351 0 0.869565V19.1304C0 19.6106 0.389351 20 0.869565 20H19.1304C19.6106 20 20 19.6106 20 19.1304V13.0435H18.2609V18.2609Z" fill="currentColor"/>
                                  <path d="M19.1304 0H11.3043V1.73913H17.0311L7.21118 11.559L8.44097 12.7888L18.2609 2.96892V8.69565H20V0.869565C20 0.389351 19.6106 0 19.1304 0Z" fill="currentColor"/>
                                </svg>
                              </div>
                            ) : (
                              <div class="base-button__icon-arrow"></div>
                            )}
                          </div>
                        </a>
                        {button.labelBelow && (
                          <p class="application-button-item__label-below" set:html={button.labelBelow.replace(/\n/g, '<br>')}></p>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          ) : (
            <p class="results-placeholder">当選結果の内容をこちらに掲載予定です。</p>
          )}
        </div>
      </div>
    </section>

    <!-- 特設講座 Section -->
    <section id="special-course" class="content-section content-section--special">
      <div class="content-section__container">
        <ContentSectionHeader 
          englishTitle=""
          title="特設講座"
          class="fade-up"
        />
        
        <div class="results-content">
          {specialCoursesWithButtons.length > 0 ? (
            specialCoursesWithButtons.map((course) => {
              const courseButtons = course.buttons.filter((button: any) => {
                const buttonType = Array.isArray(button.type) ? button.type[0] : button.type;
                return button.visible && buttonType !== "参加意向確認";
              });
              
              return (
                <div class="special-course-item">
                  <h3 class="special-course-item__title">{course.title}</h3>
                  <div class="application-buttons-section">
                    <div class={`application-buttons-grid ${courseButtons.length === 1 ? 'application-buttons-grid--single' : ''}`}>
                      {courseButtons.map((button) => {
                        // 外部リンクかどうかを判定
                        const isExternalLink = button.url.startsWith('http://') || button.url.startsWith('https://');
                        
                        return (
                          <div class="application-button-item">
                            {button.labelAbove && (
                              <p class="application-button-item__label-above" set:html={button.labelAbove.replace(/\n/g, '<br>')}></p>
                            )}
                            <div class="application-button-item__button-wrapper">
                              <a 
                                href={button.url} 
                                class="application-button-item__button base-button base-button--blue"
                                target={isExternalLink ? '_blank' : undefined}
                                rel={isExternalLink ? 'noopener noreferrer' : undefined}
                              >
                                <span class="base-button__text" set:html={button.buttonText.replace(/\n/g, '<br>')}></span>
                                <div class="base-button__icon">
                                  {isExternalLink ? (
                                    <div class="base-button__icon-external">
                                      <svg width="16" height="16" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M18.2609 18.2609H1.73913V1.73913H6.95652V0H0.869565C0.389351 0 0 0.389351 0 0.869565V19.1304C0 19.6106 0.389351 20 0.869565 20H19.1304C19.6106 20 20 19.6106 20 19.1304V13.0435H18.2609V18.2609Z" fill="currentColor"/>
                                        <path d="M19.1304 0H11.3043V1.73913H17.0311L7.21118 11.559L8.44097 12.7888L18.2609 2.96892V8.69565H20V0.869565C20 0.389351 19.6106 0 19.1304 0Z" fill="currentColor"/>
                                      </svg>
                                    </div>
                                  ) : (
                                    <div class="base-button__icon-arrow"></div>
                                  )}
                                </div>
                              </a>
                              {button.labelBelow && (
                                <p class="application-button-item__label-below" set:html={button.labelBelow.replace(/\n/g, '<br>')}></p>
                              )}
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>
              );
            })
          ) : (
            <p class="results-placeholder">当選結果の内容をこちらに掲載予定です。</p>
          )}
        </div>
      </div>
    </section>
  </main>
</BaseLayout>

<style lang="scss">
  @import "../../styles/index";

  .hero {
    position: relative;
    padding: rem(80) 0 rem(20);
    background: linear-gradient(to bottom, $background-secondary 0%, $background-primary 70%, $background-primary 100%);
    border-radius: 0 rem(120) 0 0;
    
    @include breakpoint-up(md) {
      padding: 0;
      border-radius: 0 rem(240) 0 0;
    }

    &::after {
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      width: 100%;
      height: 100%;
      background-color: $brand-primary;
      z-index: -1;
    }

    &__container {
      margin: 0 auto;
      padding: 0 0 0 5%;
      overflow: hidden;
      @include breakpoint-up(xl) {
        padding: 0 0 0 rem(50);
      }
    }

    &__content {
      position: relative;
      padding: rem(40) 0 0;

      @include breakpoint-up(md) {
        padding: 0;
        display: flex;
        align-items: stretch;
        gap: rem(60);
      }
    }

    &__text {
      @include breakpoint-up(md) {
        flex: 1;
        padding: rem(120) 0 0;
      }
      @include breakpoint-up(xl) {
        padding: rem(160) 0 0;
      }
    }

    &__title {
      @include font-ja-2l(semibold);
      font-weight: bold;
      color: $text-primary;
      margin: 0 0 rem(8) 0;
      line-height: 1.4;

      @include breakpoint-up(lg) {
        @include font-ja-3l(semibold);
        margin-bottom: rem(12);
      }
    }

    &__subtitle {
      @include font-en-s(semibold);
      color: $text-secondary;
      margin: 0 0 rem(30) 0;
      font-weight: 500;
      letter-spacing: 0.05em;

      @include breakpoint-up(lg) {
        @include font-en-m(semibold);
        margin-bottom: 0;
      }
    }

    &__image {
      display: none;
      
      @include breakpoint-up(md) {
        display: block;
        flex: 0 0 auto;
        width: 45%;
        min-height: rem(100);
        background: transparent;
      }
      @include breakpoint-up(xl) {
        max-width: rem(600);
        min-height: rem(400);
      }

      img {
        display: none;
      }
    }
  }

  .breadcrumb {
    padding: rem(20) 0;
    background: $background-primary;
    @include breakpoint-up(lg) {
      padding: rem(50) 0 rem(20);
    }

    &__container {
      margin: 0 auto;
      padding: 0 0 0 5%;
      @include breakpoint-up(xl) {
        padding: 0 0 0 rem(50);
      }
    }

    &__list {
      display: flex;
      align-items: center;
      gap: rem(8);
      list-style: none;
      margin: 0;
      padding: 0;
      @include font-ja-3s;
    }

    &__item {
      display: flex;
      align-items: center;

      &:not(:last-child)::after {
        content: '>';
        margin-left: rem(8);
        color: $text-secondary;
      }

      a {
        @include font-ja-3s(semibold);
        color: $text-link;
        text-decoration: underline;

        &:hover {
          color: $text-link-hover;
          text-decoration: underline;
        }
      }

      &[aria-current="page"] {
        @include font-ja-3s;
        color: $text-primary;
        font-weight: 500;
      }
    }
  }

  .introduction {
    padding: rem(20) 0 rem(30);
    background: $background-primary;
    @include breakpoint-up(lg) {
      padding: rem(80) 0 rem(30);
    }

    &__container {
      margin: 0 auto;
      padding: 0 5%;
      @include breakpoint-up(xl) {
        padding: 0 rem(50);
      }
    }

    &__text {
      @include font-ja-s;
      color: $text-primary;
      line-height: 1.8;
      margin: 0;
      max-width: rem(1200);
    }
  }

  .page-nav {
    padding: rem(20) 0 0;
    background: $background-primary;

    &__container {
      margin: 0 auto;
      padding: 0 5%;
      @include breakpoint-up(xl) {
        padding: 0 rem(50);
      }
    }

    &__menu {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 0;

      @include breakpoint-up(sm) {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
      }
    }

    &__link {
      display: flex;
      align-items: center;
      gap: rem(5);
      color: $text-primary;
      text-decoration: none;
      transition: color 0.3s ease;
      padding: rem(6) rem(10);

      @include breakpoint-up(sm) {
        gap: rem(12);
        padding: rem(6) rem(20);
        border-right: 1px solid $border-secondary;
      }

      @include breakpoint-up(xl) {
        padding: rem(6) rem(30);
      }

      &:first-child {
        @include breakpoint-up(sm) {
          padding-left: 0;
        }
      }

      &:last-child {
        border-right: none;
      }

      &:hover {
        color: $brand-secondary;
        text-decoration: none;

        .page-nav__arrow {
          transform: translateY(rem(6)) rotate(45deg);
        }
      }
    }

    &__text {
      @include font-ja-s(semibold);
    }

    &__arrow {
      width: rem(9);
      height: rem(9);
      border-right: 2px solid currentColor;
      border-bottom: 2px solid currentColor;
      transform: rotate(45deg);
      transition: transform 0.3s ease;
      flex-shrink: 0;
      margin-right: rem(3);
    }
  }

  .content-section {
    padding: rem(40) 0 rem(50);
    background: $background-primary;
    @include breakpoint-up(xl) {
      padding: rem(50) 0 rem(70);
    }

    &:nth-child(even) {
      background: $background-secondary;
    }
    
    // 特設講座セクションは常にbackground-primary
    &--special {
      background: $background-primary !important;
    }

    &__container {
      margin: 0 auto;
      padding: 0 5%;
      overflow: hidden;
      @include breakpoint-up(xl) {
        padding: 0 rem(50);
      }
    }

    &__header {
      position: relative;
      margin-bottom: rem(50);
      margin-right: -5%;
      overflow: hidden;
      @include breakpoint-up(xl) {
        margin-bottom: rem(70);
        margin-right: 0;
      }
    }

    &__title-wrapper {
      position: relative;
      display: flex;
      align-items: center;
      gap: rem(8);
      z-index: 2;
      margin-top: rem(40);
      
      @include breakpoint-up(lg) {
        margin-top: rem(80);
      }
    }

    &__icon {
      width: rem(24);
      height: rem(24);
      flex-shrink: 0;
      margin-top: rem(2);

      @include breakpoint-up(lg) {
        width: rem(36);
        height: rem(36);
        margin-top: rem(4);
      }
    }

    &__title {
      @include font-ja-l(semibold);
      color: $text-primary;
      margin: 0;
      line-height: 1.4;

      @include breakpoint-up(lg) {
        @include font-ja-2l(semibold);
      }
    }
  }

  .results-content {
    margin-top: rem(40);
    
    @include breakpoint-up(md) {
      margin-top: rem(60);
    }
  }

  .results-placeholder {
    @include font-ja-s;
    color: $text-secondary;
    text-align: center;
    padding: rem(60) rem(20);
    background: $background-secondary;
    border-radius: $radius-m;
    margin: 0;
  }

  /* 特設講座関連スタイル */
  .special-course-item {
    margin-bottom: rem(60);
    padding-bottom: rem(50);
    
    @include breakpoint-up(md) {
      margin-bottom: rem(80);
      padding-bottom: rem(60);
    }
    
    &:not(:last-child) {
      border-bottom: 2px solid $border-secondary;
    }
    
    &:last-child {
      margin-bottom: 0;
      padding-bottom: 0;
    }
    
    &__title {
      @include font-ja-m(semibold);
      color: $text-secondary;
      text-align: center;
      margin: 0 0 rem(10) 0;
      
      @include breakpoint-up(lg) {
        @include font-ja-l(semibold);
        margin-bottom: rem(20);
      }
    }
  }

  /* 申込ボタンセクション */
  .application-buttons-section {
    margin-top: rem(20);
    margin-bottom: rem(20);
    
    @include breakpoint-up(md) {
      margin-top: rem(30);
      margin-bottom: rem(30);
    }
  }

  .application-buttons-check-label {
    @include font-ja-l(semibold);
    color: $brand-secondary;
    text-align: center;
    margin-bottom: rem(10);
    animation: checkScale 2s ease-in-out infinite;
    
    @include breakpoint-up(lg) {
      @include font-ja-2l(semibold);
      margin-bottom: rem(10);
    }
  }

  .application-buttons-grid {
    display: flex;
    flex-direction: column;
    gap: rem(20);
    align-items: center;
    
    @include breakpoint-up(lg) {
      display: grid;
      gap: rem(24);
      max-width: rem(900);
      margin: 0 auto;
      justify-items: stretch;
      align-items: stretch;
      grid-template-columns: 1fr 1fr;
    }
    
    @include breakpoint-up(xl) {
      max-width: rem(1160);
    }
    
    // 1つの場合の特別なスタイル
    &.application-buttons-grid--single {
      @include breakpoint-up(lg) {
        grid-template-columns: 1fr;
        justify-items: center;
        max-width: rem(720);
      }
      
      @include breakpoint-up(xl) {
        max-width: rem(850);
      }
    }
  }

  .application-button-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    width: 100%;
    max-width: rem(420);
    padding: rem(28) rem(18);
    border: 2px solid $brand-secondary;
    border-radius: $radius-m;
    background-color: $background-primary !important;
    background-image: 
      radial-gradient(circle, #feecc5 1px, transparent 1px),
      radial-gradient(circle, #feecc5 1px, transparent 1px) !important;
    background-position: 0 0, 6.5px 6.5px !important;
    background-size: 13px 13px !important;
    animation: buttonBoxScale 2.5s ease-in-out infinite;
    
    // 特設講座セクション内のボタンも黄色テーマを維持
    .content-section--special & {
      border: 2px solid $brand-secondary;
      background-image: 
        radial-gradient(circle, #feecc5 1px, transparent 1px),
        radial-gradient(circle, #feecc5 1px, transparent 1px) !important;
    }
    
    @include breakpoint-up(md) {
      padding: rem(36) rem(20) !important;
      border-radius: $radius-l;
      max-width: rem(480);
    }
    
    @include breakpoint-up(lg) {
      padding: rem(32) rem(30);
      
      // 複数ボタンの場合：max-widthなし（stretch）
      .application-buttons-grid:not(.application-buttons-grid--single) & {
        max-width: none;
      }
      
      // 単体ボタンの場合：適切なmax-width維持
      .application-buttons-grid.application-buttons-grid--single & {
        max-width: rem(720);
      }
    }
    
    @include breakpoint-up(xl) {
      padding: rem(40) rem(40) !important;
      
      // 複数ボタンの場合：max-widthなし（stretch）
      .application-buttons-grid:not(.application-buttons-grid--single) & {
        max-width: none;
      }
      
      // 単体ボタンの場合：適切なmax-width維持
      .application-buttons-grid.application-buttons-grid--single & {
        max-width: rem(850);
      }
    }
    
    &__label-above {
      @include font-ja-s(semibold);
      color: $text-secondary;
      margin: 0 0 rem(16) 0;
      text-align: left;
      line-height: 1.6;
      
      @include breakpoint-up(md) {
        margin-bottom: rem(20);
      }
    }
    
    &__button-wrapper {
      display: flex;
      flex-direction: column;
      align-items: center;
      flex-grow: 1;
      justify-content: center;
      margin-top: rem(16);
      
      @include breakpoint-up(md) {
        margin-top: rem(20);
      }
    }
    
    &__button {
      color: $text-white !important;
      text-decoration: none !important;
      
      &:hover {
        color: $text-white !important;
        text-decoration: none !important;
      }
      
      &:focus {
        color: $text-white !important;
        text-decoration: none !important;
      }
      
      &:visited {
        color: $text-white !important;
        text-decoration: none !important;
      }
      
      .base-button__text {
        color: $text-white !important;
      }
    }
    
    &__label-below {
      @include font-ja-s(semibold);
      color: $text-primary;
      margin: rem(5) 0 0 0;
      text-align: center;
      line-height: 1.6;
    }
  }

  /* 外部リンクアイコン（SVG） */
  :global(.base-button__icon-external) {
    width: rem(16);
    height: rem(16);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.5s ease;
    
    svg {
      width: 100%;
      height: 100%;
      transition: all 0.5s ease;
    }
  }

  // ブルーボタン用の外部リンクアイコン
  :global(.base-button--blue .base-button__icon-external) {
    color: $brand-primary;
  }

  :global(.base-button--blue:hover .base-button__icon-external) {
    color: $brand-secondary;
    transform: rotate(360deg);
  }

  // ホワイトボタン用の外部リンクアイコン
  :global(.base-button--white .base-button__icon-external) {
    color: $background-primary;
  }

  :global(.base-button--white:hover .base-button__icon-external) {
    color: $brand-secondary;
    transform: rotate(360deg);
  }

  // ピンクボタン用の外部リンクアイコン
  :global(.base-button--pink .base-button__icon-external) {
    color: $brand-pink;
  }

  :global(.base-button--pink:hover .base-button__icon-external) {
    color: $brand-secondary;
    transform: rotate(360deg);
  }


  /* スケールアニメーション */
  @keyframes checkScale {
    0%, 100% { 
      transform: scale(1); 
    }
    50% { 
      transform: scale(1.08); 
    }
  }

  @keyframes buttonBoxScale {
    0%, 100% { 
      transform: scale(1); 
    }
    40% { 
      transform: scale(1.02); 
    }
    60% { 
      transform: scale(1.02); 
    }
  }
</style>

<script>
// スムーススクロール
document.addEventListener('DOMContentLoaded', function() {
  const navLinks = document.querySelectorAll('.page-nav__link');
  
  navLinks.forEach(link => {
    link.addEventListener('click', function(e: Event) {
      e.preventDefault();
      
      const target = e.currentTarget as HTMLAnchorElement;
      const href = target.getAttribute('href');
      const targetId = href?.substring(1);
      const targetElement = targetId ? document.getElementById(targetId) : null;
      
      if (targetElement) {
        targetElement.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    });
  });
});

// スクロールアニメーション用のIntersection Observer
document.addEventListener('DOMContentLoaded', function() {
  const observerOptions = {
    threshold: 0.1, // 要素の10%が見えたら発火
    rootMargin: '0px 0px -50px 0px' // 下から50px余裕を持たせる
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('is-visible');
        // 一度表示されたら監視を停止（パフォーマンス向上）
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);

  // fade-upクラスを持つ全ての要素を監視対象に追加
  const fadeUpElements = document.querySelectorAll('.fade-up');
  fadeUpElements.forEach(element => {
    observer.observe(element);
  });
});
</script>